<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AndroidCtrl</name>
    </assembly>
    <members>
        <member name="T:AndroidCtrl.AAPT.AAPT">
            <summary>
             .NET 4.x wrapper class, to interact with the (A)ndroid (A)sset (P)ackaging (T)ool.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Dispose">
            <summary>
             Dispose is not a real IDisposable but it do its work.
             <para>It will reset the whole AAPT class to null, everything in this class will be deleted, stopped, closed, etc...</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Xecute(System.String,System.Int32)">
            <summary>
             Executes AAPT with given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="timeOut">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.AAPT.Execute(System.String,System.Int32)">
            <summary>
             Execute custom AAPT command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.PATH_AAPT">
            <summary>
             Get the full AAPT path
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.PATH_DIRECTORY_AAPT">
            <summary>
             Get/Set the AAPT directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.Instance">
            <summary>
             Returns the AAPT class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.CmdTimeOut">
            <summary>
             CMDTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.AAPT.AAPT.Dump">
            <summary>
             Returns and if not exist, creates the Dump instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.AAPT.Dump">
            <summary>
             This class give u access to some AAPT dump parser
            </summary>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Badging(System.String)">
            <summary>
             Returns the badging dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>DataModelBadging or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Configurations(System.String)">
            <summary>
             Returns the configurations dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>List string or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Permissions(System.String)">
            <summary>
             Returns the permission dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>List string or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.Resources(System.String)">
            <summary>
             Returns the resources dump
            </summary>
            <param name="localPath">Local APK path</param>
            <returns>List DataModelDumpResources or null</returns>
        </member>
        <member name="M:AndroidCtrl.AAPT.Dump.RawDump(System.String)">
            <summary>
             Returns the raw dump
            </summary>
            <param name="dump">Dump part e.g. badging, configurations, etc.</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.ADB">
            <summary>
             .NET 4.x wrapper class, to interact with an Android device via the (A)ndroid (D)ebug (B)ridge.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            <para>*NOTE* All functions in this and some sub-classes are designed to work primary without root.</para>
            <para>*NOTE* If u want to use all functions with root rights, u have to restart the ADB Deamon on the device with root rights.</para>
            <para>*NOTE* U can do so by using Instance().Device.Deamon.Root() or simply Instance().Root().</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Instance(System.String)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
             <para>*NOTE* This is the basic interactor in this class, via this var u MUST get/create every device instance.</para>
             <para>*NOTE* Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.</para>
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Instance(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Returns and if not exists creates, the choosen ADB device instance
             <para>*NOTE* This is the basic interactor in this class, via this var u MUST get/create every device instance.</para>
             <para>*NOTE* Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.</para>
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.RemoveDevice(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.RemoveDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.SelectDevice(System.String)">
            <summary>
             Select the given device serial in the static class var.
             <para>*NOTE* U can reach the selected device instance from everywhere in ur code via ADB.Instance().</para>
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.SelectDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Select the given device in the static class var.
             <para>*NOTE* U can reach the selected device instance from everywhere in ur code via ADB.Instance().</para>
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Connect(System.String,System.String)">
            <summary>
             Connect a single devices via ip
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0</param>
            <param name="port">default is 5555</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Connect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Connect the given device
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns>List DevicesItemData</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Disconnect(System.String,System.String)">
            <summary>
             Disconnect a single or all ip devices
            </summary>
            <param name="deviceIP">e.g. 0.0.0.0</param>
            <param name="port">default is 5555</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Disconnect(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Disconnect the given device
            </summary>
            <param name="device">DataModelDevicesItem</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Dispose(System.Boolean)">
            <summary>
             Dispose is not a real IDisposable but it do its work.
             <para>It will reset the whole ADB class to null, everything in this class will be deleted, stopped, closed, etc...</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.IsStarted">
            <summary>
             Check if ADB process is running
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Start">
            <summary>
             Start ADB-Server
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Stop(System.Boolean)">
            <summary>
             Stop ADB-Server
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Version">
            <summary>
             Get ADB version
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.WaitForDevice">
            <summary>
             Wait until a device is connected
             <para>*NOTE* This will freeze the current thread until a device is connected</para>
             <para>*HINT* Put functions which need this kind of wait procedure in a separate thread.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Xecute(System.String,System.String,System.Int32)">
            <summary>
             Executes ADB with given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="timeOut">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Backup(System.String,System.String,System.Int32)">
            <summary>
             Backup the Device with given arguments. Usage backup(file,args)
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Backup arguments</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.BugReport">
            <summary>
             BugReport returns all information from the device that should be included in a bug report
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Emu(System.String)">
            <summary>
             Run emulator console command
            </summary>
            <param name="cmd">Command to run</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Execute(System.String,System.Int32)">
            <summary>
             Execute custom ADB command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Forward(System.String,System.String,System.String)">
            <summary>
             Forward a port, list or remove them
            </summary>
            <param name="args">--list, --no-rebind, --remove, --remove-all </param>
            <param name="localPort">Local port</param>
            <param name="remotePort">Remote port</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.GetDevPath">
            <summary>
             Return the devpath or an empty string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.GetSerial">
            <summary>
             Return the Device serialnumber or an empty string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.GetState">
            <summary>
             Return the Device state
            </summary>
            <returns>StateID</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Install(System.String,System.String,System.Int32)">
            <summary>
             Install an APK on Device
             <para>*NOTE* timeOut = -1 implies infinite.</para>
             <para>*HINT* -l means forward-lock the app</para>
             <para>*HINT* -r means reinstall the app and keep its data</para>
             <para>*HINT* -s means install the app on SD-Card instead of the internal storage</para>
             <para>*HINT* the rest of the params u can use, u can find in the adb help</para>
            </summary>
            <param name="localPath">File path</param>
            <param name="args">Installer arguments or null</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.JDWP">
            <summary>
             JDWP list PIDs of processes hosting a JDWP transport
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Remount">
            <summary>
             Remounts the Device system partition to read-write
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Reboot(AndroidCtrl.IDBoot)">
            <summary>
             Reboot the device to given mode
             *NOTE* If u restart a W-Lan/Lan device the adb.exe it self will wait infinite.
             *NOTE* All reboot requests will be send and closed after 250 ms (this will not freeze the thread).
            </summary>
            <param name="mode">BootMode</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Restore(System.String,System.Int32)">
            <summary>
             Restore backup to Device.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="localPath">File path</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Root">
            <summary>
             Restarts adb daemon with root permissions on the device
             <para>*NOTE* i recommend at this point Device.Deamon.Root()</para>
             <para>*HINT* The device must be rooted</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmd(System.String,System.Int32)">
            <summary>
             Send an Shell-Command to the Device
             <para>*NOTE* timeOut = -1 implies infinite.</para>
             <para>*HINT* If u want to send a SU-Command use Device.SU.ShellCmd()</para>
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.ShellCmdStack(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
             Send an Shell-Command-Stack to the Device
             <para>*NOTE* timeOut = -1 implies infinite. timeOut = 0 use the instance default timeout.</para>
             <para>*NOTE* Between the cmds in the stack is an delay of 150 ms</para>
             <para>*HINT* If u want to send a SU-Command-Stack use Device.SU.ShellCmdStack()</para>
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Sideload(System.String,System.Int32)">
            <summary>
             Sideloads a rom
             <para>*NOTE* timeOut = -1 implies infinite.</para>
             <para>*HINT* The recovery must support this function.</para>
            </summary>
            <param name="localPath">Local path (c:\path\to\rom.zip)</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.TCPIP(System.String)">
            <summary>
             Restart adbd daemon listen on given tcp port
            </summary>
            <param name="port">Define the port to connect</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.UnInstall(System.String,System.Boolean,System.Int32)">
            <summary>
             UnInstall an APK on Device
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="package">package name e.g. com.example.package</param>
            <param name="keepData">keeps the cache and userdata</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.USB">
            <summary>
             Restart adbd daemon listen on USB
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Pull(System.String,System.String,System.Int32)">
            <summary>
             Get files/folders from the Device
             <para>*NOTE* i recommend at these point my PushPullUTF8.Pull() method.</para>
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <param name="localPath">Local path</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ADB.Push(System.String,System.String,System.Int32)">
            <summary>
             Send files/folders to the Device
             <para>*NOTE* i recommend at these point my PushPullUTF8.Push() method.</para>
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.PATH_ADB">
            <summary>
             Get the full ADB path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.PATH_DIRECTORY_ADB">
            <summary>
             Get/Set the ADB directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.ConnectionMonitor">
            <summary>
             Returns and if not exist, creates the ConnectionMonitor instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.DeviceID">
            <summary>
             DeviceID return the DeviceID in this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.IsRoot">
            <summary>
             IsRoot checks if ADB is running as root in this instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.CmdTimeOut">
            <summary>
             CMDTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.UseBusyBox">
            <summary>
             UseBusyBox de-/activate BusyBox for the whole instance. Set false for unset.
            <para>*NOTE* If no BusyBox is installed on the device, this parameter can't be set to true it will always return false!</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.Device">
            <summary>
             Returns and if not exist, creates the Device instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.ShellRT">
            <summary>
             Returns a new ShellRT instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.PushPullUTF8">
            <summary>
             Returns a new PushPullUTF8 instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.ADB.StatusWindow">
            <summary>
             Returns a new StatusWindow instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.ConnectionMonitor">
            <summary>
             Manage the device connection monitor
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ConnectionMonitor.Dispose">
            <summary>
             IDisposable
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ConnectionMonitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
            <returns>if monitor is running return is true else false</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ConnectionMonitor.Start">
            <summary>
             DeviceConnectionMonitor starts a thread which checks every 10 sec for connected devices
            </summary>
            <returns>true if start successfull else false</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.ConnectionMonitor.Stop">
            <summary>
             Stops the ConnectionMonitor Thread.
            </summary>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.ADB.ConnectionMonitor.Callback">
            <summary>
             add/remove the callback function to raise if an event occure.
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.ActivityManager">
            <summary>
             ActivityManager is the general class to interact with the device ActivityManager.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.DumpHeap(System.String,System.String,System.Boolean,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="PID">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <param name="user">User id or "current"</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.ForceStop(System.String,System.String)">
            <summary>
             Force stop everything associated with package
            </summary>
            <param name="package">App/Package to force-stop</param>
            <param name="user">User id or (all|current)</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.Kill(System.String,System.String)">
            <summary>
             Kill all processes associated with package
            </summary>
            <param name="package">App/Package to kill</param>
            <param name="user">User id or (all|current)</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.KillAll">
            <summary>
             Kill all background processes.
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.Restart">
            <summary>
             Restart the user-space system.
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.Start(System.String,System.String,System.String)">
            <summary>
             Starts the given activity with the given arguments
            </summary>
            <param name="package">Package/Activity to launch</param>
            <param name="pargs">Package arguments</param>
            <param name="aargs">Activity arguments</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.StartService(System.String,System.String)">
            <summary>
             Stop a Service
            </summary>
            <param name="intent">Service to start</param>
            <param name="user">User id or "current"</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.ActivityManager.StopService(System.String,System.String)">
            <summary>
             Stop a Service
            </summary>
            <param name="intent">Service to stop</param>
            <param name="user">User id or "current"</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BuildProperties">
            <summary>
             BuildProperties is the general class to manage the build.prop
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Get(System.String,System.Boolean)">
            <summary>
             Get the given build property if exists, if not it returns an empty string
            </summary>
            <param name="property">property name to get</param>
            <param name="dictionary">true for class internal dictinary search</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Refresh">
            <summary>
             Returns the build properties and set the new dictionary to the class internal dictionary
            </summary>
            <returns>Dictionary string string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BuildProperties.Set(System.String,System.String)">
            <summary>
             Set a build property on the device
            </summary>
            <param name="key">Property key</param>
            <param name="val">Property value</param>
            <returns>List string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BuildProperties.GetProperties">
            <summary>
             Returns the class internal build property dictionary
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.Find">
            <summary>
             Find is the general class to interact with busybox find.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.All(System.String,System.String)">
            <summary>
             Search everything that match the given item
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.BlockDeviceFile(System.String,System.String,System.Boolean)">
            <summary>
             Search block device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.CharacterDeviceFile(System.String,System.String,System.Boolean)">
            <summary>
             Search character device files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Directory(System.String,System.String,System.Boolean)">
            <summary>
             Search directorys
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.File(System.String,System.String,System.Boolean)">
            <summary>
             Search files
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.Link(System.String,System.String,System.Boolean)">
            <summary>
             Search symlinks
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.NamedPipe(System.String,System.String,System.Boolean)">
            <summary>
             Search named pipes
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Find.UnixDomainSocket(System.String,System.String,System.Boolean)">
            <summary>
             Search unix domain sockets
            </summary>
            <param name="remoteFolder">Directory path to deep search</param>
            <param name="item">File/Folder name (case insensitiv)</param>
            <param name="su">Use su to send the command</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Dumpsys">
            <summary>
             Dumpsys is the general class to interact with the device dumpsys
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Battery">
            <summary>
             Return the current battery dump
            </summary>
            <returns>DataModelDumpsysBattery or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.Meminfo_v4xx(System.Boolean)">
            <summary>
             Returns the current meminfo dump
            <para>*NOTE* This method works only on Android 4.x.x devices!</para>
            </summary>
            <param name="su">Send command as SuperUser</param>
            <returns>DataModelDumpsysMeminfo_4xx or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.MeminfoPackage(System.String,System.Boolean)">
            <summary>
             Returns the current meminfo dump about the given package name
            </summary>
            <param name="package">Package name</param>
            <param name="su">Send command as SuperUser</param>
            <returns>DataModelDumpsysMeminfoPackage or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Dumpsys.RawDump(System.String,System.Boolean)">
            <summary>
             Returns the raw dump
            </summary>
            <param name="dump">Dump part e.g. meminfo, battery, etc.</param>
            <param name="su">Send command as SuperUser</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.FileSystem">
            <summary>
             FileSystem is the general class to read/parse the filesystem overview from the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.FileSystem.Parse">
            <summary>
             Parse the Read output into a human readable class
            </summary>
            <returns>List ItemData</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.FileSystem.ParseItem(System.String)">
            <summary>
             Parse the Read() output into a human readable class
            </summary>
            <param name="rawItem">the raw item from the shell output</param>
            <returns>DataModelFileSystemItem</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.FileSystem.ReadRaw">
            <summary>
             Read the filesystem overview on from the device (shell mode = df), (busybox mode = df -Pakh)
            </summary>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Forensics">
            <summary>
             This class give u access to basic forensic tools
             <para>*NOTE* This class needs root access on the device</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.Kill(System.String,System.String)">
            <summary>
             This will use (kill -10 PID) to create a hprof file from the given PID
             <para>*NOTE* The file can be found at /data/misc/heap-dump-tm"timestamp"-pid"PID".hprof</para>
             <para>*NOTE* This will not work in newer versions of android, in this case i can refer to DumpHeap().</para>
            </summary>
            <param name="PID">Process id to kill</param>
            <param name="signal">Signal, default is -10</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.DumpHeap(System.String,System.String,System.Boolean,System.String)">
            <summary>
             This will create a heap dump of the given process.
            </summary>
            <param name="PID">Process id to snapshot</param>
            <param name="remoteFile">Remote dump file path</param>
            <param name="n">Use breaks (?)</param>
            <param name="user">User id or "current"</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.PartitionCopy(System.String,System.String,System.Int32)">
            <summary>
             This will create a copy of the given mountpoint (dd if=/path/to/mountpoint of=/path/to/backup.dd)
            </summary>
            <param name="mountPoint">Mountpoint to copy</param>
            <param name="remoteBackupPath">Backup file path on the device</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.RemoveLockScreenGestureStock">
            <summary>
             Try to remove the lockscreen gesture key file on the device
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.RemoveLockScreenGestureCyanogenmod">
            <summary>
             Try to remove the lockscreen gesture key file on the device
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Forensics.TryExtractData(System.String)">
            <summary>
             This will try to extract some dbs from the device to the given path
             *NOTE* Depending on the device and the size of the directories, this can take a while.
            </summary>
            <param name="localDirectoryPath">Local backup path</param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Info">
            <summary>
             Info is the general information class, which give u alot infos about the current selected device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Info.Refresh">
            <summary>
             Refresh the current class object and returns also the new object
            </summary>
            <returns>DataModelDeviceInfo</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Info.Get">
            <summary>
             Returns the current DataModelDeviceInfo object in this class
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.LogCat">
            <summary>
             LogCat is the general class to interact with logcat.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ParseLog(System.Collections.Generic.List{System.String},System.Boolean)">
            <summary>
             Returns a parsed object list of the given raw logcat output
            </summary>
            <param name="rawData">Logcat raw data</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <returns>List DataModelLogCat</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ParseLogFile(System.String,System.Boolean)">
            <summary>
             Returns a parsed object list of the given logfile
            </summary>
            <param name="localFile">Local file path</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <returns>List DataModelLogCat</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.RawLog(System.Boolean)">
            <summary>
             Returns the complete raw logcat output
            </summary>
            <param name="_long">Define that "-v long" will be used to create the log</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.RealTime(System.String)">
            <summary>
             Returns a new LogCat instance
            </summary>
            <param name="args">Arguments (events|main|radio|system|etc.)</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ToLocalFile(System.String,System.Boolean)">
            <summary>
             Write the logcat to the given local file location
            </summary>
            <param name="localFilePath">Logfile local path</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCat.ToRemoteFile(System.String,System.Boolean)">
            <summary>
             Write the logcat to the given remote file location
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <param name="_long">Define that "-v long" was used to create the log</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.OpenRecoveryScript">
            <summary>
             This class creates an OpenRecoveryScript file with the defined values and write it to the device.
             <para>*NOTE* This class needs root access on the device</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.WriteScriptToDevice">
            <summary>
             Creates the openrecoveryscript file in /cache/recovery/ on the device
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.GetBackupArgs">
            <summary>
             Get the configured values into a single string
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.OpenRecoveryScript.GetRestoreArgs">
            <summary>
             Get the configured values into a single string
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupAndroidSecure">
            <summary>
             Set the A = .android_secure param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupBoot">
            <summary>
             Set the B = Boot (kernel) partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupCache">
            <summary>
             Set the C = Cache partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupData">
            <summary>
             Set the D = Data partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSdExt">
            <summary>
             Set the E = sd-ext partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupNoMD5sums">
            <summary>
             Set the M = Do not create MD5sums param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupCompression">
            <summary>
             Set the O = Enable backup compression param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupRecovery">
            <summary>
             Set the R = Recovery partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSystem">
            <summary>
             Set the S = System partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial1">
            <summary>
             Set the 1 = Special partition 1 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial2">
            <summary>
             Set the 2 = Special partition 2 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupSpecial3">
            <summary>
             Set the 3 = Special partition 3 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.BackupDirectory">
            <summary>
             Set the foldername param (Optional) NO "/" at the beginning
             <para>*HINT* Folder name in the devices backups folder, not the full path</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeCache">
            <summary>
             Set the wipe cache param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeDalvik">
            <summary>
             Set the wipe dalvik-cache param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.WipeData">
            <summary>
             Set the wipe data param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreAndroidSecure">
            <summary>
             Set the A = .android_secure param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreBoot">
            <summary>
             Set the B = Boot (kernel) partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreCache">
            <summary>
             Set the C = Cache partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreData">
            <summary>
             Set the D = Data partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSdExt">
            <summary>
             Set the E = sd-ext partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreNoMD5sums">
            <summary>
             Set the M = Do not check MD5sums param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreRecovery">
            <summary>
             Set the R = Recovery partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSystem">
            <summary>
             Set the S = System partition param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial1">
            <summary>
             Set the 1 = Special partition 1 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial2">
            <summary>
             Set the 2 = Special partition 2 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreSpecial3">
            <summary>
             Set the 3 = Special partition 3 param
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.RestoreDirectory">
            <summary>
             Set the foldername param
             <para>*HINT* The full path to the backup folder (/mnt/sdcard/(Backup provider)/BACKUPS/(Device serial number)/foldername)</para>
             <para>*HINT* If u only set these path all backuped partitions will be restored.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.OpenRecoveryScript.InstallFilePath">
            <summary>
             Set the zip file path (/path/to/romfile.zip)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.PackageManager">
            <summary>
             PackageManager is the general class to interact with the device PackageManager.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Block(System.String,System.String)">
            <summary>
             Blocks the given package.
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Clear(System.String,System.String)">
            <summary>
             Deletes all data associated with the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Disable(System.String,System.String)">
            <summary>
             Disables the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.DisableUser(System.String,System.String)">
            <summary>
             Disables the given userID for the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.DisableUntilUsed(System.String,System.String)">
            <summary>
             Disable until used
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Dump(System.String)">
            <summary>
             Returns the system state associated with the given package.
            </summary>
            <param name="package">Package name</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Enable(System.String,System.String)">
            <summary>
             Enables the given package.
            <para>*NOTE* "userID" is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.GetInstallLocation">
            <summary>
             Return the current install location
            </summary>
            <returns>IDInstallLocation</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListFeatures">
            <summary>
             Returns all features of the system
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListInstrumentation(System.String)">
            <summary>
             Returns the installed test packages
            </summary>
            <param name="package">Package name</param>
            <returns>List DataModelPackageManagerInstrumentation</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListLibraries">
            <summary>
             Returns all installed libraries
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListPackages(System.String)">
            <summary>
             Returns the installed package(s) info(s)
            </summary>
            <param name="package">Package name</param>
            <returns>List DataModelPackageManagerPackage</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListPermissionGroups">
            <summary>
             Returns all permission groups
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.ListPermissions">
            <summary>
             Returns all permissions and it's info's
            </summary>
            <returns>List DataModelPackageManagerPermission</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Path(System.String)">
            <summary>
             Gets the APK path from given package
            </summary>
            <param name="package">Package</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.SetInstallLocation(AndroidCtrl.IDInstallLocation)">
            <summary>
             Sets the given install location
            </summary>
            <param name="location">IDInstallLocation</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.UnBlock(System.String,System.String)">
            <summary>
             Unblocks the given package.
            <para>*NOTE* This method is used since Android 4.x.x</para>
            </summary>
            <param name="package">Package name</param>
            <param name="userID">User ID</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.PackageManager.Uninstall(System.String,System.Boolean)">
            <summary>
             Uninstalls the given package
            </summary>
            <param name="package">Package name</param>
            <param name="keepData">Keep package data</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Phone">
            <summary>
             Phone is the general class to interact with the phone/sms part on the device
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.AddContact(System.String,System.String,System.String)">
            <summary>
             Adds an new contact on the device
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread.</para>
            </summary>
            <param name="name">Contact name</param>
            <param name="number">Contact number</param>
            <param name="email">Contact email</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.Call(System.String)">
            <summary>
             Calls the given number on the device
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread.</para>
            </summary>
            <param name="number">Number to call (+49123456 or 0049123456)</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.Dial(System.String)">
            <summary>
             Dials the given number on the device
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread.</para>
            </summary>
            <param name="number">Number to dial (+49123456 or 0049123456)</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Phone.SendSMS(System.String,System.String)">
            <summary>
             Send the given text as SMS from the device to the given number
             <para>*NOTE* This will only work if the display is on and NOT locked or if the display is off and NOT locked</para>
             <para>*NOTE* If the device is locked, this function will sometimes freeze the current thread until its unlocked.</para>
            </summary>
            <param name="receiver">Number of recipient (+49123456) or (0049123456)</param>
            <param name="text">Text to send *NOTE* 160 signs are 1 SMS</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Screen">
            <summary>
             Screen is the general class to interact with the device screen.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.IsOn">
            <summary>
             Check if the device screen is currently on or off
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.OnOff">
            <summary>
             Turns the screen on or off, depending on current state.
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Record(System.String,System.String,System.String,System.Boolean)">
            <summary>
             Starts an screenrecord on the device
            </summary>
            <param name="remotePath">File path to store (mp4)</param>
            <param name="timeLimit">Recording time limit (sec)</param>
            <param name="size">Recoding size (1280x720)</param>
            <param name="rotate">Rotate 90 degrees</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.Shot(System.String,System.Int32)">
            <summary>
             Make a screenshot on the device (Filename example: Screenshot_dd.MM.yyyy_hh-mm-ss.png)
            </summary>
            <param name="remotePath">Remote directory path</param>
            <param name="displayID">Display ID default is 0</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Screen.UnlockWithPin(System.String)">
            <summary>
             Sends the given unlock-pin to the device
            </summary>
            <param name="pin">Unlock-Pin</param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.SuShellRT">
            <summary>
             SuShellRT starts an ADB shell process with su rights in an background thread and return its output via its CallbackProcessOutput delegate, 
             u have also the ablility to send commands to the running shell via RunCMD("my command") function.
             <para>*NOTE* Between the cmds is an delay of 150 ms</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SuShellRT.Dispose">
            <summary>
             Dispose this instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.SuShellRT.RunCMD(System.String)">
            <summary>
             RunCMD in the shell instance
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.SuShellRT.Callback">
            <summary>
             Callback define the output function
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.Tar">
            <summary>
             Tar is the general class to interact with busybox tar.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectory(System.String,AndroidCtrl.IDTar)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">Directory to compress</param>
            <param name="compression">Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromDirectoryList(System.String,System.Collections.Generic.List{System.String},AndroidCtrl.IDTar)">
            <summary>
             Create an compressed tar from the given file and directory names inside the given working directory
            </summary>
            <param name="remotePath">Remote working directory</param>
            <param name="list">List with file and directory names to compress</param>
            <param name="compression">Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.CreateFromFile(System.String,AndroidCtrl.IDTar)">
            <summary>
             Create an compressed tar from the given path
            </summary>
            <param name="remotePath">File to compress</param>
            <param name="compression">Compression type</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.Extract(System.String,AndroidCtrl.IDTar,System.String)">
            <summary>
             Extract the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para>
            </param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ExtractList(System.String,System.Collections.Generic.List{System.String},AndroidCtrl.IDTar,System.String)">
            <summary>
             Extract the given files/directories from the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="list">List with file and directory names to de-compress</param>
            <param name="compression">De-Compression type</param>
            <param name="extractTo">Remote extraction path
            <para>*NOTE* If this variable is null a new directory will be generated and the content of the tar file will be extracted to it</para></param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.List(System.String)">
            <summary>
             List the content of the given tar file
            </summary>
            <param name="remotePath">Tar file path</param>
            <returns>List string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.Tar.ShowFile(System.String,System.String,AndroidCtrl.IDTar)">
            <summary>
             Decompress a single file to stdout and return it as an List string
            <para>*NOTE* This will CURRENTLY ONLY work with UTF-8 encoded files, all other encodings will be destroyed while the transfer</para>
            </summary>
            <param name="remotePath">Tar file path</param>
            <param name="viewFile">File to view (Path example: Folder/file.txt or file.txt)</param>
            <param name="compression">De-Compression type</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Wipe">
            <summary>
             This class give u access to some predefined wipe methods
             <para>*NOTE* Parts of these class requires root access on the device.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Cache">
            <summary>
             Wipe the Cache directory/mount
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Dalvik">
            <summary>
             Wipe the Dalvik-Cache
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Wipe.Data">
            <summary>
             Wipe the Data directory/mount
             <para>*NOTE* This method requires root access on the device.</para>
            </summary>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.CallbackConnectionMonitor">
            <summary>
             This callback will be raised if the connected devices have changed (adb/fastboot)
            </summary>
            <param name="sender">string adb or fastboot</param>
            <param name="e">ConnectionMonitorArgs object</param>
        </member>
        <member name="T:AndroidCtrl.CallbackDirectoryParser">
            <summary>
             This callback will be raised if u have set an callback to the directory parser
            </summary>
            <param name="sender">null</param>
            <param name="e">DirectoryParserArgs object</param>
        </member>
        <member name="T:AndroidCtrl.CallbackFileFolderTransfer">
            <summary>
             This callback will be raised if u have set an callback to pushpullutf8 push
            </summary>
            <param name="sender">null</param>
            <param name="e">FileFolderTransferArgs object</param>
        </member>
        <member name="T:AndroidCtrl.CallbackProcessResponse">
            <summary>
             This callback will be raised if u have set an callback to any realtime process
            </summary>
            <param name="sender">null</param>
            <param name="e">ProcessResponseArgs object</param>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Daemon">
            <summary>
             Daemon is the general class to manage the adb deamon on the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.IsRoot">
            <summary>
             Check if adbd have root rights on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Restart(System.Int32)">
            <summary>
             Restart adbd on the device
             <para>*NOTE* if port is empty or 0, no port value will be set to the device</para>
            </summary>
            <param name="port">restarts the adbd on the given port</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Root">
            <summary>
             Restart adbd with root permissions on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.Stop">
            <summary>
             Stop adbd on the device
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Daemon.UnRoot">
            <summary>
             Restart adbd without root permissions on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Directories">
            <summary>
             Directories is the general class for directory interactions on/with the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Chmod(System.String)">
            <summary>
             Sets the given chmod for this directory on the device.
             <para>*NOTE* U can also set an unix chmod (rwxrwxrwx). If u want to set an unix format u must use the full 9 chars.</para>
             <para>*NOTE* Like this examples: (rw-rwx-wt), (rwsrwsrwt), (rw-r--r--)</para>
             <para>*HINT* Usefull if u use the directory parser and want to copy some permissions to other files/folders.</para>
             <para>*HINT* This function uses Tools.General.ConvertUnixChmod() to convert the unix format to an number.</para>
            </summary>
            <param name="chmod">The chmod to set</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Chown(System.String,System.String,System.Boolean)">
            <summary>
             Own this directory with given owner and group id
            <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="owner">New owner</param>
            <param name="group">New group</param>
            <param name="recursive">Recursive (by default true)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.CopyTo(System.String)">
            <summary>
             Copy this directory to the given location on the device
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Create">
            <summary>
             Creates an empty directory on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Delete">
            <summary>
             Delete the given folder and its content on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Exists">
            <summary>
             Check if the directory exist
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetDirectories">
            <summary>
             Returns only the sym-/directories in this directory as a parsed DataModelFileSystemItem list
            <para>*NOTE* This method uses the callback also!</para>
            </summary>
            <returns>List DataModelFileSystemItem</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetDirectoriesRaw">
            <summary>
             Returns only the sym-/directories in this directory as a simple raw string list.
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetFiles">
            <summary>
             Returns only the sym-/files in this directory as a parsed DataModelFileSystemItem list
            <para>*NOTE* This method uses the callback also!</para>
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.GetFilesRaw">
            <summary>
             Returns only the sym-/files in this directory as a simple raw string list.
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.MoveTo(System.String)">
            <summary>
             Move this directory to the given location on the device
            </summary>
            <param name="destination">Remote destination folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Parse">
            <summary>
             Parse the ReadRaw() output into a human readable class
            </summary>
            <returns>List ItemData</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ParseItem(System.String)">
            <summary>
             Parse a single raw string item into a human readable class
            </summary>
            <param name="rawItem">the raw item from the shell output</param>
            <returns>DataModelFileSystemItem or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ParseInfo">
            <summary>
             Parse the RawInfo() output into a human readable class
            </summary>
            <returns>List ItemData or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.PullTo(System.String)">
            <summary>
             Download this directory from the device to the given location
            </summary>
            <param name="destination">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.PushFrom(System.String)">
            <summary>
             Upload this directory to the device from the given location
            </summary>
            <param name="source">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.RawInfo">
            <summary>
             Read the raw directory informations
            </summary>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ReadRaw">
            <summary>
             Read the given directory and return a raw List string
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.Rename(System.String)">
            <summary>
             Rename the given directory on the device
            </summary>
            <param name="newName">New directoryname (not the full path)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Directories.ToString">
            <summary>
             return complete path of this directory
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Name">
            <summary>
             Returns only the directoryname without any path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Parent">
            <summary>
             Returns the parent directory as Directories or if no parent exists null
            </summary>
            <returns>Directories</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Directories.Size">
            <summary>
             Returns the directorysize in byte
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.Directories.CallBack">
            <summary>
             CallBack defines the output function
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Files">
            <summary>
             Files is the general class for file interactions on/with the device.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Append(System.String)">
            <summary>
             Append the given data
            </summary>
            <param name="data">data to append</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Chmod(System.String)">
            <summary>
             Sets the given chmod for this file on the device.
             <para>*NOTE* U can also set an unix chmod (rwxrwxrwx). If u want to set an unix format u must use the full 9 chars.</para>
             <para>*NOTE* Like this examples: (rw-rwx-wt), (rwsrwsrwt), (rw-r--r--)</para>
             <para>*HINT* Usefull if u use the directory parser and want to copy some permissions to other files/folders.</para>
             <para>*HINT* This function uses Tools.General.ConvertUnixChmod() to convert the unix format to an number.</para>
            </summary>
            <param name="chmod">The chmod to set</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Chown(System.String,System.String)">
            <summary>
             Own this file with given owner and group id
            <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="owner">New owner</param>
            <param name="group">New group</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.CopyTo(System.String)">
            <summary>
             Copy this file to the given location on the device
            </summary>
            <param name="destination">Remote destination file/folder path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Create(System.String)">
            <summary>
             Create an file on the device
            </summary>
            <param name="content">content to write to the file or nulll</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Delete">
            <summary>
             Delete the given file on the device
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Exists">
            <summary>
             Exist check if the file exist
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Hash(AndroidCtrl.IDHash)">
            <summary>
             Generate a hash value from the given IDHash
             <para>*NOTE* This method needs BusyBox!</para>
            </summary>
            <param name="hash">IDHash default is md5</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.HexDump">
            <summary>
             Gets the hexdump
             <para>*NOTE* This method needs BusyBox!</para>
            </summary>
            <returns>List string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.MoveTo(System.String)">
            <summary>
             Move this file to the given location on the device
            </summary>
            <param name="destination">Remote destination file path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.ParseInfo">
            <summary>
             Parse the RawInfo() output into a human readable class
            </summary>
            <returns>List ItemData or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.PullTo(System.String)">
            <summary>
             Download this file from the device to the given location
            </summary>
            <param name="destination">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.PushFrom(System.String)">
            <summary>
             Upload this file to the device from the given location
            </summary>
            <param name="source">Local path</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.RawInfo">
            <summary>
             Read the raw file informations
            </summary>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.ReadContent">
            <summary>
             Reads the given file content on the device
            </summary>
            <returns>List string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.Rename(System.String)">
            <summary>
             Rename the given file on the device
            </summary>
            <param name="newName">New filename (not the full path)</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Files.ToString">
            <summary>
             return complete path of this file
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Directory">
            <summary>
             Returns the parent directory as Directories
            </summary>
            <returns>Directories</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Extension">
            <summary>
             Returns the file extension (e.g. .exe, .txt, .rc, etc...)
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Name">
            <summary>
             Returns only the filename without any path
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Files.Size">
            <summary>
             Returns the filesize in byte
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Mount">
            <summary>
             Mount is the general class to un-/mount the filesystem or parts of it, on the device.
             <para>*NOTE* This class needs root access on the device</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.IsRootRW">
            <summary>
             IsRootRW checks if rootfs and /system is mounted as read/write or not
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.IsReadWrite(System.String)">
            <summary>
             IsReadWrite checks if the given id is mounted as read/write or not
            </summary>
            <param name="id">id to mount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.ReadOnly(System.String)">
            <summary>
             ReadOnly try to remount the given id as read/only
            </summary>
            <param name="id">id to remount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.ReadWrite(System.String)">
            <summary>
             ReadWrite try to remount the given id as read/write
            </summary>
            <param name="id">id to remount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.RootRO">
            <summary>
             RootRO try to remount rootfs and /system as read/only
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.RootRW">
            <summary>
             RootRW try to remount rootfs and /system as read/write
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Mount.UnMount(System.String)">
            <summary>
             Unmount the given mount
            </summary>
            <param name="id">id to unmount e.g. rootfs or /system</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Su">
            <summary>
             Su is the general class to interact with su rights on the device.
             <para>*NOTE* This class needs root access on the device.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.Exists">
            <summary>
             Exists check if the device have SU access
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmd(System.String,System.Boolean,System.Int32)">
            <summary>
             Send an SU-Shell-Command to the Device
             <para>*NOTE* timeOut = -1 implies infinite. timeOut = 0 use the instance default timeout.</para>
             <para>*NOTE* This function needs root access on the device</para>
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="shell">true for su shell use</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.ShellCmdStack(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
             Send an SU-Shell-Command-Stack to the Device
             <para>*NOTE* timeOut = -1 implies infinite. timeOut = 0 use the instance default timeout.</para>
             <para>*NOTE* Between the cmds in the stack is an delay of 150 ms</para>
             <para>*NOTE* This function needs root access on the device</para>
            </summary>
            <param name="cmdStack">Command to send to Device Shell</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout. timeOut = 0 use the instance default timeout.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Su.Version">
            <summary>
             Version return the current SU version number
             <para>*NOTE* if the version can not be determined or if su is not found or not accessable the return is String.Empty</para>
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Su.ShellRT">
            <summary>
             Returns a new SuShellRT instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.LogCatRT">
            <summary>
             LogCat starts an ADB logcat process in an background thread and return its output via its CallbackProcessOutput delegate.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.LogCatRT.Dispose">
            <summary>
             Dispose this instance
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.Device.LogCatRT.Callback">
            <summary>
             Callback define the output function
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.PushPullUTF8">
            <summary>
             PushPullUTF8 is an ADB push/pull UTF-8 wrapper.
             <para>U've never seen this before, with this extreme powerfull wrapper class, u can transfer UTF-8 encoded file/folder names to/from ur device</para>
             <para>with the correct names after the copy process. So u'll never again have problems with files/folders names/paths which contains for example (üöäÜÖÄ€ etc.).</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.PushPullUTF8.BuildFolderPushList(System.String,System.String,System.Collections.Generic.List{AndroidCtrl.DataModelPushList})">
            <summary>
             BuildPushList generates a list with files/folders to push 
            </summary>
            <param name="localDirectoryPath">Local path MUST BE A FOLDER</param>
            <param name="remoteDirectoryPath">Device path MUST BE A FOLDER, remember use "/" instead of "\" or "\\"</param>
            <param name="tmpList">the list object for the the deepsearch</param>
            <returns>List PushListData</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.PushPullUTF8.Pull(System.String,System.String,System.Int32)">
            <summary>
             Get files/folders from the Device
            </summary>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <param name="localPath">Local path</param>
            <param name="timeOut">time the process will wait for output</param>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.PushPullUTF8.RenameFolder(System.String)">
            <summary>
             RenameFolder renames all files/folders with an wrong charset back to utf8
            </summary>
            <param name="localPath">Local path</param>
        </member>
        <member name="M:AndroidCtrl.ADB.PushPullUTF8.Push(System.String,System.String,System.Boolean,System.Int32)">
            <summary>
             Send files/folders to the Device
            </summary>
            <param name="localPath">Local path</param>
            <param name="remotePath">Device path remember use "/" instead of "\" or "\\"</param>
            <param name="tmpToSD">set the upload device tmp dir to sdcard or device</param>
            <param name="timeOut">time the process will wait for output</param>
            <returns>bool</returns>
        </member>
        <member name="E:AndroidCtrl.ADB.PushPullUTF8.CallBack">
            <summary>
             CallBack define the output callback
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.ShellRT">
            <summary>
             ShellRT starts an ADB shell process in an background thread and return its output via its CallbackProcessOutput delegate, 
             u have also the ablility to send commands to the running shell via RunCMD("my command") function.
             <para>*NOTE* Between the cmds is an delay of 150 ms</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ShellRT.Dispose">
            <summary>
             Dispose this instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.ShellRT.RunCMD(System.String)">
            <summary>
             RunCMD in the shell instance
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.ShellRT.Callback">
            <summary>
             Callback define the output function
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.StatusWindow">
            <summary>
             StatusWindow starts an ADB status-window process in an background thread and return its output via its CallbackProcessOutput delegate.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.StatusWindow.Dispose">
            <summary>
             Dispose this instance
            </summary>
        </member>
        <member name="E:AndroidCtrl.ADB.StatusWindow.Callback">
            <summary>
             Callback define the output function
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDeviceInfo">
            <summary>
             DataModelDeviceInfo holds the device information
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Baseband">
            <summary>
             Holds the value from ro.baseband if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Bootloader">
            <summary>
             Holds the value from ro.bootloader if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Bootmode">
            <summary>
             Holds the value from ro.bootmode if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Carrier">
            <summary>
             Holds the value from ro.carrier if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.Revision">
            <summary>
             Holds the value from ro.revision if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.SerialNo">
            <summary>
             Holds the value from ro.serialno if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductShip">
            <summary>
             Holds the value from ro.product_ship if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BusyBoxExist">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Exist()
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BusyBoxVersion">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Version()
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BusyBoxTools">
            <summary>
             Holds the value from ADB.Instance().Device.BusyBox.Tools()
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.SUExist">
            <summary>
             Holds the value from ADB.Instance().Device.SU.Exist()
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.SUVersion">
            <summary>
             Holds the value from ADB.Instance().Device.SU.Version()
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBSerial">
            <summary>
             Holds the value from ADB.Instance().DeviceID if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBSecure">
            <summary>
             Holds the value from ro.adb.secure if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBRoot">
            <summary>
             Holds the value from service.adb.root if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBTCPPort">
            <summary>
             Holds the value from service.adb.tcp.port if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ADBQEmuD">
            <summary>
             Holds the value from ro.adb.qemud if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootBaseBand">
            <summary>
             Holds the value from ro.boot.baseband if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootBattPowerOn">
            <summary>
             Holds the value from ro.boot.batt_poweron if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootBootloader">
            <summary>
             Holds the value from ro.boot.bootloader if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootCarrier">
            <summary>
             Holds the value from ro.boot.carrier if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootCID">
            <summary>
             Holds the value from ro.boot.cid if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootDQ">
            <summary>
             Holds the value from ro.boot.dq if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootEMMC">
            <summary>
             Holds the value from ro.boot.emmc if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootHardware">
            <summary>
             Holds the value from ro.boot.hardware if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootKeyCaps">
            <summary>
             Holds the value from ro.boot.keycaps if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootLB">
            <summary>
             Holds the value from ro.boot.lb if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootMID">
            <summary>
             Holds the value from ro.boot.mid if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootMode">
            <summary>
             Holds the value from ro.boot.mode if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootPageSize">
            <summary>
             Holds the value from ro.boot.pagesize if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BootSerialNo">
            <summary>
             Holds the value from ro.boot.serialno if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildCharacteristics">
            <summary>
             Holds the value from ro.build.characteristics if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildPDA">
            <summary>
             Holds the value from ro.build.PDA if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildDate">
            <summary>
             Holds the value from ro.build.date if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildHost">
            <summary>
             Holds the value from ro.build.host if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildDescription">
            <summary>
             Holds the value from ro.build.description if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildDisplayID">
            <summary>
             Holds the value from ro.build.display.id if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildFingerprint">
            <summary>
             Holds the value from ro.build.fingerprint if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildHiddenVer">
            <summary>
             Holds the value from ro.build.hidden_ver if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildID">
            <summary>
             Holds the value from ro.build.id if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildProduct">
            <summary>
             Holds the value from ro.build.product if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildSeLinux">
            <summary>
             Holds the value from ro.build.selinux if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildTags">
            <summary>
             Holds the value from ro.build.tags if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildType">
            <summary>
             Holds the value from ro.build.type if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildUser">
            <summary>
             Holds the value from ro.build.user if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersion">
            <summary>
             Holds the value from ro.build.version if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionCodename">
            <summary>
             Holds the value from ro.build.version.codename if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionIncremental">
            <summary>
             Holds the value from ro.build.version.incremental if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionRelease">
            <summary>
             Holds the value from ro.build.version.release if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.BuildVersionSDK">
            <summary>
             Holds the value from ro.build.version.sdk if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductName">
            <summary>
             Holds the value from ro.product.name if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductModel">
            <summary>
             Holds the value from ro.product.model if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductManufacturer">
            <summary>
             Holds the value from ro.product.manufacturer if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductDevice">
            <summary>
             Holds the value from ro.product.device if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductBoard">
            <summary>
             Holds the value from ro.product.board if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductBrand">
            <summary>
             Holds the value from ro.product.brand if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductCpuAbi">
            <summary>
             Holds the value from ro.product.cpu.abi if exist
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDeviceInfo.ProductCpuAbi2">
            <summary>
             Holds the value from ro.product.cpu.abi2 if exist
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDevicesItem">
            <summary>
             DataModelDevicesItem holds the connected device information
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDevicesItem.#ctor(System.String,System.String,AndroidCtrl.IDDeviceState,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDevicesItem object
            </summary>
            <param name="mode">("adb" or "fastboot"</param>
            <param name="serial">(ADB/Fastboot) serialnumber</param>
            <param name="state">(ADB/Fastboot) state (abdroid,fastboot,etc...)</param>
            <param name="product">(ADB) product name</param>
            <param name="model">(ADB) model name</param>
            <param name="device">(ADB) deviceid</param>
            <param name="ip">IP</param>
            <param name="port">Port</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Mode">
            <summary>
             Holds the request mode "adb" or "fastboot"
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Device">
            <summary>
             Holds the (ADB) deviceid
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.IP">
            <summary>
             Holds the IP
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Model">
            <summary>
             Holds the (ADB) model name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Port">
            <summary>
             Holds the Port
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Product">
            <summary>
             Holds the (ADB) product name
            <para>*NOTE* Can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.Serial">
            <summary>
             Holds the (ADB/Fastboot) serialnumber
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDevicesItem.State">
            <summary>
             Holds the (ADB/Fastboot) state (abdroid,fastboot,etc...)
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpBadging">
            <summary>
             Holds the AAPT badging dump
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpBadging.#ctor">
            <summary>
             Creates the DataModelDumpBadging object
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppLabel">
            <summary>
             Holds the Application name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppIcon">
            <summary>
             Holds the Application icon path
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppIcons">
            <summary>
             Holds the Application icons in each supported density
             <para>*NOTE* Format is Key=Density Value=IconPath></para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.AppLabels">
            <summary>
             Holds the Application labels in each supported language
             <para>*NOTE* Format is Key=Language (en / en_EN) Value=Label></para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.Densities">
            <summary>
             Holds the Application supported densities
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.LaunchableActivities">
            <summary>
             Holds the launchable-activities
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.Locales">
            <summary>
             Holds the Application supported locales
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.NativeCode">
            <summary>
             Holds the Application supported native codes
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackName">
            <summary>
             Holds the Package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackVersionCode">
            <summary>
             Holds the Package version code
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.PackVersionName">
            <summary>
             Holds the Package version name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.SupportedScreens">
            <summary>
             Holds the Application supported screens
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.SupportsAnyDensity">
            <summary>
             Holds the Application support any density trigger
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.SdkVersion">
            <summary>
             Holds the Application SDK version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.TargetSdkVersion">
            <summary>
             Holds the Application target SDK version
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedFeatures">
            <summary>
             Holds the Application used features
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedImpliedFeatures">
            <summary>
             Holds the Application used implied features
             <para>*NOTE* Format is Key=Feature Value=Extended></para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedPermissions">
            <summary>
             Holds the Application used permissions
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadging.UsedImpliedPermissions">
            <summary>
             Holds the Application used implied permissions
             <para>*NOTE* Format is Key=Permission Value=Extended></para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpBadgingLaunchableActivity">
            <summary>
             Holds the launchable-activity data of the AAPT badging dump
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpBadgingLaunchableActivity object
            </summary>
            <param name="name">Activity name</param>
            <param name="label">Activity label</param>
            <param name="icon">Activity icon path</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.Name">
            <summary>
             Holds the Application launchable-activity name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.Label">
            <summary>
             Holds the Application launchable-activity label
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpBadgingLaunchableActivity.Icon">
            <summary>
             Holds the Application launchable-activity icon path
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesGroup">
            <summary>
             Holds the group data of the AAPT resources dump
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesGroup.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesGroup object
            </summary>
            <param name="group">Group number</param>
            <param name="id">Group id</param>
            <param name="name">Group name</param>
            <param name="pcount">Group packageCount</param>
            <param name="packages">Group packages</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Group">
            <summary>
             Holds the group number
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Id">
            <summary>
             Holds the group id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Name">
            <summary>
             Holds the group name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.PCount">
            <summary>
             Holds the group packageCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesGroup.Packages">
            <summary>
             Holds the group packages
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesPackage">
            <summary>
             Holds the package data of the AAPT resources dump
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesPackage.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesPackage object
            </summary>
            <param name="package">Package number</param>
            <param name="id">Package id</param>
            <param name="name">Package name</param>
            <param name="tcount">Package typeCount</param>
            <param name="types">Package types</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Package">
            <summary>
             Holds the Package number
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Id">
            <summary>
             Holds the Package id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Name">
            <summary>
             Holds the Package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.TCount">
            <summary>
             Holds the Package typeCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesPackage.Types">
            <summary>
             Holds the Package types
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesType">
            <summary>
             Holds the type data of the AAPT resources dump
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesType.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesType object
            </summary>
            <param name="type">Type number</param>
            <param name="ccount">Type configCount</param>
            <param name="ecount">Type entryCount</param>
            <param name="entries">Type entries</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.Type">
            <summary>
             Holds the Type number
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.CCount">
            <summary>
             Holds the Type configCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.ECount">
            <summary>
             Holds the Type entryCount
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.Configs">
            <summary>
             Holds the Type configs
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesType.SpecResources">
            <summary>
             Holds the Type Spec Resources
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesConfig">
            <summary>
             Holds the config data of the AAPT resources dump
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesConfig.#ctor(System.String,System.String)">
            <summary>
             Creates the DataModelDumpResourcesConfig object
            </summary>
            <param name="type">Config type</param>
            <param name="resources">Config resources</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesConfig.Type">
            <summary>
             Holds the Config type (default, etc)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesConfig.Resources">
            <summary>
             Holds the Config resources
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesResource">
            <summary>
             Holds the AAPT resources dump item data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesResource.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResources object
            </summary>
            <param name="offset">Resource offset</param>
            <param name="package">Resource package name</param>
            <param name="type">Resource type (id, string, xml, etc.)</param>
            <param name="id">Resource package id</param>
            <param name="t">t value</param>
            <param name="d">d value</param>
            <param name="s">s value</param>
            <param name="r">r value</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Offset">
            <summary>
             Holds the Resource offset
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Package">
            <summary>
             Holds the Resource package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Type">
            <summary>
             Holds the Resource type (id, string, xml, etc.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.Id">
            <summary>
             Holds the Resource package id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.T">
            <summary>
             Holds the T var value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.D">
            <summary>
             Holds the D var value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.S">
            <summary>
             Holds the S var value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesResource.R">
            <summary>
             Holds the R var value
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpResourcesSpecResource">
            <summary>
             Holds the AAPT resources dump item data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpResourcesSpecResource.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpResources object
            </summary>
            <param name="offset">Resource offset</param>
            <param name="package">Resource package name</param>
            <param name="type">Resource type (id, string, xml, etc.)</param>
            <param name="id">Resource package id</param>
            <param name="flags">flags value</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Offset">
            <summary>
             Holds the Resource offset
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Package">
            <summary>
             Holds the Resource package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Type">
            <summary>
             Holds the Resource type (id, string, xml, etc.)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Id">
            <summary>
             Holds the Resource package id
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpResourcesSpecResource.Flags">
            <summary>
             Holds the T var value
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysBattery">
            <summary>
             DataModelDumpsysBattery holds the battery data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysBattery.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelDumpsysBattery
            </summary>
            <param name="ac">AC powered</param>
            <param name="usb">USB powered</param>
            <param name="wireless">Wireless powered</param>
            <param name="status">Current battery state</param>
            <param name="health">Current battery health</param>
            <param name="present">Present</param>
            <param name="level">Loading level</param>
            <param name="scale">Scale</param>
            <param name="voltage">Current voltage</param>
            <param name="current">Current voltage use</param>
            <param name="temperature">Current temperature</param>
            <param name="technology">Battery technology</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.AC">
            <summary>
             AC powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.USB">
            <summary>
             USB powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Wireless">
            <summary>
             Wireless powered
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Status">
            <summary>
             Current battery state
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Health">
            <summary>
             Current battery health
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Present">
            <summary>
             Present
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Level">
            <summary>
             Loading level
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Scale">
            <summary>
             Scale
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Voltage">
            <summary>
             Current voltage
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Current">
            <summary>
             Current voltage use
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Temperature">
            <summary>
             Current temperature
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysBattery.Technology">
            <summary>
             Battery technology
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfo_v4xx">
            <summary>
             Holds the ADB dumpsys meminfo data
            <para>*NOTE* This object is for Android 4.x.x output designed</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfo_4xx object
            </summary>
            <param name="uptime">Used ram since device start</param>
            <param name="realtime">Used ram since installation "?"</param>
            <param name="byprocess">Packages by process</param>
            <param name="byoom">Packages by oom adjustment</param>
            <param name="bycategory">Packages by category</param>
            <param name="totalram">Complete physical ram</param>
            <param name="freeram">Free ram</param>
            <param name="usedram">Used ram</param>
            <param name="lostram">Lost ram</param>
            <param name="tuning">Tuning infos</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.Uptime">
            <summary>
             Holds the current uptime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.Realtime">
            <summary>
             Holds the current realtime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.ByProcess">
            <summary>
             Holds the "By Process" package list
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.ByOOM">
            <summary>
             Holds the "By OOM adjustment" package list sorted by thier areas. For example System, Cache, etc.
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.ByCategory">
            <summary>
             Holds the "By Category" package list
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.TotalRAM">
            <summary>
             Holds the complete available physical ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.FreeRAM">
            <summary>
             Holds the free ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.UsedRAM">
            <summary>
             Holds the used ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.LostRAM">
            <summary>
             Holds the lost ram size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfo_v4xx.Tuning">
            <summary>
             Holds informations about the "Tuning"
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx">
            <summary>
             Holds the ADB dumpsys meminfo item data
            <para>*NOTE* This object is for Android 4.x.x output designed</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoItem_4xx object
            </summary>
            <param name="size">Mem size</param>
            <param name="unit">Mem size unit</param>
            <param name="name">Package-/Activityname</param>
            <param name="pid">PID</param>
            <param name="activities">Has activities</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Size">
            <summary>
             Holds the current size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Unit">
            <summary>
             Holds the current size unit
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Name">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.PID">
            <summary>
             Holds the current PID
            <para>*NOTE* This variable is always "null" if u request this model via "ByCategory"</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoItem_v4xx.Activities">
            <summary>
             True if launched activities else false
            <para>*NOTE* This variable is always "false" if u request this model via "ByCategory"</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackage">
            <summary>
             Holds the ADB dumpsys meminfo package data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackage.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackage object
            </summary>
            <param name="uptime">Uptime</param>
            <param name="realtime">Realtime</param>
            <param name="pid">PID</param>
            <param name="meminfo">Meminfo table</param>
            <param name="objects">Objects table</param>
            <param name="sql">SQL table</param>
            <param name="databases">Database table</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Uptime">
            <summary>
             Holds the current uptime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Realtime">
            <summary>
             Holds the current realtime size
            <para>*HINT* Normally this value is given in kB</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.PID">
            <summary>
             Holds the PID
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Meminfo_v2xx">
            <summary>
             Holds the meminfo table lines
            <para>*NOTE* This list object is for Android 2.x.x output designed and empty if the device run's not Android v.2.x.x</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Meminfo_v4xx">
            <summary>
             Holds the meminfo table lines
            <para>*NOTE* This list object is for Android 4.x.x output designed and empty if the device run's not Android v.4.x.x</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Objects">
            <summary>
             Holds the objects info's
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.SQL">
            <summary>
             Holds the SQL info's
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackage.Databases">
            <summary>
             Holds the database info's
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem">
            <summary>
             Holds the ADB dumpsys meminfo package database line data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageMeminfoItem_v4xx object
            </summary>
            <param name="pagesize">Page size</param>
            <param name="databasesize">Database size</param>
            <param name="lookaside">Look a side</param>
            <param name="cache">Cache sizes</param>
            <param name="databasename">Database name</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.PageSize">
            <summary>
             Holds the page size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.DatabaseSize">
            <summary>
             Holds the database size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.LookASide">
            <summary>
             Holds the "Look a side" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.Cache">
            <summary>
             Holds the cache sizes
            <para>*NOTE* This value is 0 if the device run's Android v.2.x.x</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageDatabaseItem.DatabaseName">
            <summary>
             Holds the database name
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx">
            <summary>
             Holds the ADB dumpsys meminfo package meminfo line data
            <para>*NOTE* This object is for Android 2.x.x output designed</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageMeminfoItem_v2xx object
            </summary>
            <param name="element">Element name</param>
            <param name="native">Native</param>
            <param name="dalvik">Dalvik</param>
            <param name="other">Other</param>
            <param name="total">Total</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Element">
            <summary>
             Holds the element name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Native">
            <summary>
             Holds the native size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Dalvik">
            <summary>
             Holds the dalvik size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Other">
            <summary>
             Holds the other size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v2xx.Total">
            <summary>
             Holds the total size
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx">
            <summary>
             Holds the ADB dumpsys meminfo package meminfo line data
            <para>*NOTE* This object is for Android 4.x.x output designed</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageMeminfoItem_v4xx object
            </summary>
            <param name="element">Element name</param>
            <param name="psstotal">PSS Total</param>
            <param name="privatedirty">Private Dirty</param>
            <param name="privateclean">Private Clean</param>
            <param name="swappeddirty">Swapped Dirty</param>
            <param name="heapsize">Heap Size</param>
            <param name="heapalloc">Heap Alloc</param>
            <param name="heap">Heap</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.Element">
            <summary>
             Holds the element name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.PSSTotal">
            <summary>
             Holds the "PSS Total" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.PrivateDirty">
            <summary>
             Holds the "Private Dirty" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.PrivateClean">
            <summary>
             Holds the "Private Clean" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.SwappedDirty">
            <summary>
             Holds the "Swapped Dirty" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.HeapSize">
            <summary>
             Holds the "Heap Size" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.HeapAlloc">
            <summary>
             Holds the "Heap Alloc" value
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageMeminfoItem_v4xx.Heap">
            <summary>
             Holds the "Heap" value
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects">
            <summary>
             Holds the ADB dumpsys meminfo package objects data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageObjects object
            </summary>
            <param name="views">Views</param>
            <param name="viewroots">View Roots</param>
            <param name="appcontexts">App Contexts</param>
            <param name="activities">Activities</param>
            <param name="assets">Assets</param>
            <param name="assetmanagers">Asset-Managers</param>
            <param name="localbinders">Local-Binders</param>
            <param name="proxybinders">Proxy-Binders</param>
            <param name="deathrecipients">Death-Recipients</param>
            <param name="opensslsockets">OpenSSL-Sockets</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.Views">
            <summary>
             Holds the amount of views
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.ViewRoots">
            <summary>
             Holds the amount of root-views
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.AppContexts">
            <summary>
             Holds the amount of contexts
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.Activities">
            <summary>
             Holds the amount of activities
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.Assets">
            <summary>
             Holds the amount of assets
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.AssetManagers">
            <summary>
             Holds the amount of asset-managers
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.LocalBinders">
            <summary>
             Holds the amount of local binders
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.ProxyBinders">
            <summary>
             Holds the amount of proxy binders
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.DeathRecipients">
            <summary>
             Holds the amount of death recipients
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageObjects.OpenSSLSockets">
            <summary>
             Holds the amount of OpenSSl sockets
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL">
            <summary>
             Holds the ADB dumpsys meminfo package SQL data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelDumpsysMeminfoPackageSQL object
            </summary>
            <param name="heap">Heap</param>
            <param name="memoryused">Used memory</param>
            <param name="pagecacheoverflow">Page-Cache-Overflow</param>
            <param name="memalloc">Allocated memory</param>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.Heap">
            <summary>
             Holds the heap size
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.MemoryUsed">
            <summary>
             Holds the used memory
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.PageCacheOverflow">
            <summary>
             Holds the page-cache-overflow
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelDumpsysMeminfoPackageSQL.MemAlloc">
            <summary>
             Holds the allocated memory
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelFileSystemItem">
            <summary>
             DataModelItem holds the file/folder data which the directory parser (shell/busybox) could get.
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelFileSystemItem.#ctor(System.String,System.String,System.String,AndroidCtrl.IDFileSystem,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelItem
            </summary>
            <param name="name">Item name (test.txt)</param>
            <param name="path">Full item path (/root/sdcard/test/text.txt)</param>
            <param name="sympath">Item sym path (/root/sdcard/test/text.txt)</param>
            <param name="id">Item filesystemid</param>
            <param name="type">Item type (.exe,.bat,block_device_file,etc...)</param>
            <param name="perm">Item permissions (rwxrwx---)</param>
            <param name="owner">Item owner (system,sdcard_rw,etc...)</param>
            <param name="group">Item group (system,sdcard_rw,etc...)</param>
            <param name="size">Item size as string in byte</param>
            <param name="sizeused">Used space *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizefree">Free space *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizeuse">Used space in (%) *NOTE* ONLY if the item is a mountpoint</param>
            <param name="sizeblock">Blocksize *NOTE* ONLY if the item is a mountpoint</param>
            <param name="date">Item date format depends on shell or busybox</param>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Name">
            <summary>
             Holds the item name (text.txt)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the mountpoint or its ID this depends on the parse mode
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Path">
            <summary>
             Holds the full item path (/root/sdcard/test/text.txt)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the mountpoint
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SymPath">
            <summary>
             Holds the full item sym path (/root/sdcard/test/text.txt)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the mountpoint
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.ID">
            <summary>
             Holds the item filesystemid (file,folder,etc...)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Type">
            <summary>
             Holds the item type (.exe,.bat,block_device_file,etc...)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will hold a IDFileSystem.(SDCARD,DIRECTORY,etc.).ToString() for better identification
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Permission">
            <summary>
             Holds the item permissions (rwxrwx---)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will be empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Owner">
            <summary>
             Holds the item owner (system,sdcard_rw,etc...)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will be empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Group">
            <summary>
             Holds the item group (system,sdcard_rw,etc...)
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will be empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Size">
            <summary>
             Holds the item size as string in byte
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will hold the whole mountpoint space
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SizeUsed">
            <summary>
             Holds the item used space
             *NOTE* ONLY if the item is an IDFileSystem.MOUNT else its empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SizeFree">
            <summary>
             Holds the item free space
             *NOTE* ONLY if the item is an IDFileSystem.MOUNT else its empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.SizeUse">
            <summary>
             Holds the item used space in (%)
             *NOTE* ONLY if the item is an IDFileSystem.MOUNT else its empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.BlockSize">
            <summary>
             Holds the item blocksize
             *NOTE* ONLY if the item is an IDFileSystem.MOUNT else its empty
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelFileSystemItem.Date">
            <summary>
             Holds the item date, the format depends on the parsing type
             *NOTE* if ItemID is an IDFileSystem.MOUNT this will be empty
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelLogCat">
            <summary>
             DataModelLogCat holds an logcat line formatted as object
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelLogCat.#ctor(System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelLogCat object
            </summary>
            <param name="type">Log type</param>
            <param name="name">Log sender name</param>
            <param name="pid">Log sender pid</param>
            <param name="info">Log info</param>
            <param name="tid">Log sender tid</param>
            <param name="time">Log time</param>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Info">
            <summary>
             Holds the log info
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Name">
            <summary>
             Holds the log sender name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.PID">
            <summary>
             Holds the log sender pid
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.TID">
            <summary>
             Holds the log sender tid
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Time">
            <summary>
             Holds the log time
            <para>*NOTE* returns null if no "-v long" was defined</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelLogCat.Type">
            <summary>
             Holds the log type
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelPackageManagerInstrumentation">
            <summary>
             DataModelPackageManagerInstrumentation holds the instrumentation data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPackageManagerInstrumentation.#ctor(System.String,System.String,System.String)">
            <summary>
             Creates the DataModelPackageManagerInstrumentation object
            </summary>
            <param name="path">APK path or null</param>
            <param name="activity">Activity</param>
            <param name="package">Package name</param>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerInstrumentation.Path">
            <summary>
             Holds the APK path
            <para>*NOTE* This variable can be null</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerInstrumentation.Activity">
            <summary>
             Holds the activity
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerInstrumentation.Package">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelPackageManagerPackage">
            <summary>
             DataModelPackageManagerPackage holds the package data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPackageManagerPackage.#ctor(System.String,System.String)">
            <summary>
             Creates the DataModelPackageManagerPackage object
            </summary>
            <param name="path">Installed APK path</param>
            <param name="package">Package name</param>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPackage.Path">
            <summary>
             Holds the installed APK path
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPackage.Package">
            <summary>
             Holds the package name
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelPackageManagerPermission">
            <summary>
             DataModelPackageManagerPermission holds the permission data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPackageManagerPermission.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             Creates the DataModelPackageManagerPermission object
            </summary>
            <param name="permission">Permission name</param>
            <param name="package">Package</param>
            <param name="label">Label</param>
            <param name="description">Description</param>
            <param name="protectionlevel">Protection-Level</param>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Permission">
            <summary>
             Holds the permission name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Package">
            <summary>
             holds the package name
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Label">
            <summary>
             Holds the label
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.Description">
            <summary>
             Holds the description
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPackageManagerPermission.ProtectionLevel">
            <summary>
             Holds the protectionLevel
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelPushList">
            <summary>
             DataModelItem holds the file/folder data which the pushpullutf8 push method needs.
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelPushList.#ctor(System.String,System.String,AndroidCtrl.IDFileSystem)">
            <summary>
             Creates a new DataModelPushList
            </summary>
            <param name="localPath">Full local item path (c:\test\test.txt)</param>
            <param name="remotePath">Full remote item path (/root/blub/test.txt)</param>
            <param name="pathID">Item filesystemid (file,folder,etc...)</param>
        </member>
        <member name="M:AndroidCtrl.DataModelPushList.Finalize">
            <summary>
             Destruct this class
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPushList.LocalPath">
            <summary>
             Holds the full local item path (c:\test\test.txt)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPushList.RemotePath">
            <summary>
             Holds the full remote item path (/root/blub/test.txt)
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelPushList.PathID">
            <summary>
             Holds the filesystemid (file,folder,etc...)
            </summary>
        </member>
        <member name="T:AndroidCtrl.DataModelUptime">
            <summary>
             DataModelUptime holds the uptime data
            </summary>
        </member>
        <member name="M:AndroidCtrl.DataModelUptime.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
             Creates a new DataModelUptime
            </summary>
            <param name="up">Device up-time</param>
            <param name="idle">Device idle-time</param>
            <param name="sleep">Device sleep-time</param>
            <param name="load">Device load-average</param>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Up">
            <summary>
             Holds the Device-up-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Idle">
            <summary>
             Holds the Device-idle-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Sleep">
            <summary>
             Holds the Device-sleep-time
            </summary>
        </member>
        <member name="P:AndroidCtrl.DataModelUptime.Load">
            <summary>
             Holds the Device-load-average (only if busybox is installed)
            </summary>
        </member>
        <member name="T:AndroidCtrl.ConnectionMonitorArgs">
            <summary>
             ConnectionMonitorArgs holds the connected devices list
            </summary>
        </member>
        <member name="F:AndroidCtrl.ConnectionMonitorArgs.Devices">
            <summary>
             Returns the list of connected devices
            </summary>
        </member>
        <member name="M:AndroidCtrl.ConnectionMonitorArgs.#ctor(System.Collections.Generic.List{AndroidCtrl.DataModelDevicesItem})">
            <summary>
             Creates the ConnectionMonitorArgs object
            </summary>
            <param name="devices">Current connected devices list</param>
        </member>
        <member name="T:AndroidCtrl.DirectoryParserArgs">
            <summary>
             DirectoryParserArgs holds the parsed element
            </summary>
        </member>
        <member name="F:AndroidCtrl.DirectoryParserArgs.Element">
            <summary>
             Returns the parsed element object
            </summary>
        </member>
        <member name="M:AndroidCtrl.DirectoryParserArgs.#ctor(AndroidCtrl.DataModelFileSystemItem)">
            <summary>
             Creates the DirectoryParserArgs object
            </summary>
            <param name="element">DataModelFileSystemItem object</param>
        </member>
        <member name="T:AndroidCtrl.FileFolderTransferArgs">
            <summary>
             FileFolderTransferArgs holds file/folder transfer info
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.From">
            <summary>
             Returns the "from" element
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.To">
            <summary>
             Returns the "to" element
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.FileSystemID">
            <summary>
             Returns the filesystem id
            </summary>
        </member>
        <member name="F:AndroidCtrl.FileFolderTransferArgs.TransferID">
            <summary>
             Returns the transfer id
            </summary>
        </member>
        <member name="M:AndroidCtrl.FileFolderTransferArgs.#ctor(System.String,System.String,AndroidCtrl.IDFileSystem,AndroidCtrl.IDTransfer)">
            <summary>
             Creates the FileFolderTransferArgs object
            </summary>
            <param name="from">Element path "from"</param>
            <param name="to">Element path "to"</param>
            <param name="filesystemid">IDFileSystem</param>
            <param name="transferid">IDTransfer</param>
        </member>
        <member name="T:AndroidCtrl.ProcessResponseArgs">
            <summary>
             ProcessResponseArgs holds the process output
            </summary>
        </member>
        <member name="F:AndroidCtrl.ProcessResponseArgs.Response">
            <summary>
             Returns the response string
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessResponseArgs.#ctor(System.String)">
            <summary>
             Creates the ProcessResponseArgs object
            </summary>
            <param name="response">string response</param>
        </member>
        <member name="T:AndroidCtrl.Fastboot.ConnectionMonitor">
            <summary>
             Manage the device connection monitor
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.ConnectionMonitor.Dispose">
            <summary>
             IDisposable
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.ConnectionMonitor.IsStarted">
            <summary>
             Check if the monitor is running
            </summary>
            <returns>if monitor is running return is true else false</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.ConnectionMonitor.Start">
            <summary>
             DeviceConnectionMonitor starts a thread which checks every 10 sec for connected devices
            </summary>
            <returns>true if start successfull else false</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.ConnectionMonitor.Stop">
            <summary>
             Stops the ConnectionMonitor Thread.
            </summary>
            <returns>true if stop successfull else false</returns>
        </member>
        <member name="E:AndroidCtrl.Fastboot.ConnectionMonitor.Callback">
            <summary>
             add/remove the callback function to raise if an event occure.
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Wipe">
            <summary>
             This class give u access to some predefined wipe methods
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.All(System.Boolean)">
            <summary>
             All, erase and format the cache, data and system partition
            </summary>
            <param name="erase">Erase each partition before it format each partition</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.Cache(System.Boolean)">
            <summary>
             Cache, erase and format the cache partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.Data(System.Boolean)">
            <summary>
             Data, erase and format the data partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Wipe.System(System.Boolean)">
            <summary>
             System, erase and format the system partition
            </summary>
            <param name="erase">Erase the partition before it format the partition</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.General">
            <summary>
             Give u a few pre-defined .NET process models
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGAAPT(System.String,System.Int32)">
            <summary>
             Executes a single AAPT command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="args">Process arguments (devices -l)</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGADB(AndroidCtrl.ADB.ADB,System.String,System.Int32)">
            <summary>
             Executes a single ADB command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="adb">ADB instance</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGADBStack(AndroidCtrl.ADB.ADB,System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
             Executes a stack of ADB commands in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* This is only usefull if u want to send a stack of shell/emu commands.</para>
             <para>*NOTE* If u want to send different ADB commands u need to use ExecuteBGStack() like, ExecuteBGStack("cmd.exe", "", ADBCommandStack, timeout)</para>
             <para>*NOTE* Between the cmds in the stack is an delay of 150 ms</para>
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="adb">ADB instance</param>
            <param name="args">Process arguments (shell)</param>
            <param name="cmdStack">The cmd stack to send</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGFastboot(AndroidCtrl.Fastboot.Fastboot,System.String,System.Int32)">
            <summary>
             Executes a single Fastboot command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="fastboot">Fastboot instance</param>
            <param name="args">Process arguments (devices -l)</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBG(System.String,System.String,System.Int32)">
            <summary>
             Executes a single command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell ls-l)</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGStack(System.String,System.String,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
             Executes a stack of commands in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* Between the cmds in the stack is an delay of 150 ms</para>
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
            <param name="cmdStack">The cmd stack to send</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.General.ExecuteBGSigner(System.String,System.Int32)">
            <summary>
             Executes a single Signer command in an hidden process window and wait the given time (ms) for output before it ends.
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="args">Process arguments (devices -l)</param>
            <param name="timeOut">Defines the time in ms the process will wait before it closes if no output returs, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="T:AndroidCtrl.ProcessModels.RealTimeBG">
            <summary>
             Give u a full working realtime background process with input ability, u can also define a callback function which will be raised if any error-/outputdata arrived.
             <para>*NOTE* Between the cmds is an delay of 150 ms</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.#ctor(System.String,System.String)">
            <summary>
             Creates a new realtime background process with input ability
            </summary>
            <param name="exe">Executable (c:\path\to\adb.exe)</param>
            <param name="args">Process arguments (shell)</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Dispose">
            <summary>
             Dispose this instance
            </summary>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.SendCMD(System.String)">
            <summary>
             Send the given command the running process
            </summary>
            <param name="cmd">command to send</param>
        </member>
        <member name="M:AndroidCtrl.ProcessModels.RealTimeBG.Start">
            <summary>
             Start the process and its background thread if "exe" exists
            </summary>
        </member>
        <member name="E:AndroidCtrl.ProcessModels.RealTimeBG.Callback">
            <summary>
             Callback define the output function
            </summary>
        </member>
        <member name="T:AndroidCtrl.Signer.Signer">
            <summary>
             .NET 4.x wrapper class, to interact with the Signapk.jar.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            <para>*NOTE* Until JavaExists() returns false, all calls inside this class and all subclasses will not work!</para>
            <para>*NOTE* If u call any method until JavaExists() returns false, u'll get no exceptions! Coz, ExecuteBG() checks if the given</para>
            <para>*NOTE* (.exe) file exists, if not, it will return an empty List string. So if the (.exe) not exists no call will be executed!</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Dispose">
            <summary>
             Dispose is not a real IDisposable but it do its work.
             <para>It will reset the whole Signer class to null, everything in this class will be deleted, stopped, closed, etc...</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.JavaExists">
            <summary>
             Checks if the java.exe exists
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Xecute(System.String,System.Int32)">
            <summary>
             Executes signapk.jar with given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="timeOut">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Execute(System.String,System.Int32)">
            <summary>
             Execute custom signapk.jar command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.Sign(System.String,System.String,System.String)">
            <summary>
             Signs an apk or zip file with the given public and private keys
             <para>*NOTE* The signed file will always be a signed copy of the given file</para>
             <para>*NOTE* The signed file will end like xxxxx_signed.apk or xxxxx_signed.zip</para>
            </summary>
            <param name="localPath">Local path to apk or zip file</param>
            <param name="publickey">Public key-file (xxxxxkey.x509.pem)</param>
            <param name="privatekey">Private key-file (xxxxxkey.pk8)</param>
        </member>
        <member name="M:AndroidCtrl.Signer.Signer.SignWithTestKeys(System.String)">
            <summary>
             Signs an apk or zip file with testkeys
             <para>*NOTE* The signed file will always be a signed copy of the given file</para>
             <para>*NOTE* The signed file will end like xxxxx_signed.apk or xxxxx_signed.zip</para>
            </summary>
            <param name="localPath">Local path to apk or zip</param>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_SIGNER">
            <summary>
             Get the full Signer path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_DIRECTORY_SIGNER">
            <summary>
             Get/Set the Java directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_PUBLIC_TEST_KEY">
            <summary>
             Get the public test key path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_PRIVATE_TEST_KEY">
            <summary>
             Get the private test key path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_JAVA">
            <summary>
             Get the full Java path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.PATH_DIRECTORY_JAVA">
            <summary>
             Get/Set the Java directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.Instance">
            <summary>
             Returns the Signer class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Signer.Signer.CmdTimeOut">
            <summary>
             CMDTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.Deploy">
            <summary>
             Deploy let u deploy the adb work files needed by this dll.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ADB">
            <summary>
             Create the working folder (PathToThisDLL/adb/) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.ExtractResource(System.Byte[],System.String)">
            <summary>
             Extract a deployment resource
            </summary>
            <param name="resource"></param>
            <param name="file"></param>
        </member>
        <member name="M:AndroidCtrl.Tools.Deploy.Signer">
            <summary>
             Create the working folder (PathToThisDLL/signer/) and deploy the files needed by this dll
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.Fastboot">
            <summary>
             .NET 4.x wrapper class, to interact with an Android device via Fastboot.
            <para>*NOTE* ALL local and remote paths, special variables, etc. will be set in quotes ("), so there is no need to quote anything.</para>
            <para>*NOTE* Exceptions are nested commands, these u have to quote ur self.</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Instance(System.String)">
            <summary>
             Returns and if not exist creates, the choosen Fastboot device instance
             <para>*NOTE* This is the basic interactor in this class, via this var u MUST get/create every device instance.</para>
             <para>*NOTE* Via device u can get/create the device specific instance. If device is empty, the return is ever the class selected device.</para>
            </summary>
            <param name="device">The device id/serialnumber or empty</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Instance(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Returns and if not exist creates, the choosen Fastboot device instance
             <para>*NOTE* This is the basic interactor in this class, via this var u MUST get/create every device instance.</para>
             <para>*NOTE* Via device u can get/create the device specific instance. If device is null, the return is ever the class selected device.</para>
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.RemoveDevice(System.String)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">Device ID</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.RemoveDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Remove the given device from the instance dictionary.
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.SelectDevice(System.String)">
            <summary>
             Select the given device serial in the static class var.
             <para>*NOTE* U can reach the selected device instance from everywhere in ur code via ADB.Instance().</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.SelectDevice(AndroidCtrl.DataModelDevicesItem)">
            <summary>
             Select the given device in the static class var.
             <para>*NOTE* U can reach the selected device instance from everywhere in ur code via ADB.Instance().</para>
            </summary>
            <param name="device">DataModelDevicesItem</param>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Devices">
            <summary>
             List all connected Devices
            </summary>
            <returns>List DevicesItemData</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Dispose(System.Boolean)">
            <summary>
             Dispose is not a real IDisposable but it do its work.
             <para>It will reset the whole Fastboot class to null, everything in this class will be deleted, stopped, closed, etc...</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.ForceStop">
            <summary>
             Force Stop (kills the fastboot.exe process)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.IsStarted">
            <summary>
             Check if Fastboot process is running
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Xecute(System.String,System.String,System.Int32)">
            <summary>
             Executes Fastboot with given command
            </summary>
            <param name="cmd">Command to execute</param>
            <param name="deviceSerial">device serialnumber</param>
            <param name="timeOut">Defines the time in ms Xecute will wait before it closes the process, -1 implies infinite.</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Boot(System.String,System.String,System.Int32)">
            <summary>
             Boot the given image
            </summary>
            <param name="kernelPath">Kernel image path</param>
            <param name="ramdiskPath">Ramdisk image/zimage path</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Continue">
            <summary>
             Continue with autoboot
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Erase(AndroidCtrl.IDDevicePartition)">
            <summary>
             Erase the given partition
            </summary>
            <param name="partition">DevicePartition</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Execute(System.String,System.Int32)">
            <summary>
             Execute custom Fastboot command
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to run</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Flash(AndroidCtrl.IDDevicePartition,System.String,System.Int32)">
            <summary>
             Write an file to an flash partition
            </summary>
            <param name="partition">DevicePartition</param>
            <param name="localPath">File path</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Format(AndroidCtrl.IDDevicePartition)">
            <summary>
             Format the given partition
            </summary>
            <param name="partition">Partition to format</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.GetVar(System.String)">
            <summary>
             Get given bootloader variable
            </summary>
            <param name="variable">Variable to get</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Reboot(AndroidCtrl.IDBoot)">
            <summary>
             Reboot Device
            </summary>
            <param name="mode">BootMode</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.Fastboot.Update(System.String,System.Int32)">
            <summary>
             Reflash Device from Update.zip
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="localPath">File path</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.PATH_FASTBOOT">
            <summary>
             Get the full Fastboot path
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.PATH_DIRECTORY_FASTBOOT">
            <summary>
             Get/Set the Fastboot directory
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.ConnectionMonitor">
            <summary>
             Returns and if not exist, creates the ConnectionMonitor instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.DeviceID">
            <summary>
             DeviceID return the DeviceID in this class instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.CmdTimeOut">
            <summary>
             CMDTimeOut define for the whole instance how long Xecute() will wait for the given process to responde.
             <para>*NOTE* Instance default is "-1", it implies infinite.</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.OEM">
            <summary>
             Returns and if not exist, creates the OEM instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.Fastboot.Fastboot.Wipe">
            <summary>
             Returns and if not exist, creates the Wipe instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.Properties.Resources">
            <summary>
              Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.ResourceManager">
            <summary>
              Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.Culture">
            <summary>
              Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
              Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.aapt">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.adb">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.AdbWinApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.AdbWinUsbApi">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.fastboot">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.signapk">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.testkey">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="P:AndroidCtrl.Properties.Resources.testkey_x509">
            <summary>
              Sucht eine lokalisierte Ressource vom Typ System.Byte[].
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.Hash">
            <summary>
             This class give u some shortcuts to .NET cryptography tools
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromFile(System.String,AndroidCtrl.IDHash)">
            <summary>
             Generate a hash from the given file and HashID
            </summary>
            <param name="path">input filepath</param>
            <param name="hash">HashID</param>
            <returns></returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.FromString(System.String,AndroidCtrl.IDHash)">
            <summary>
             Generate a hash from the given string and HashID
            </summary>
            <param name="str">input string</param>
            <param name="hash">HashID</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Hash.Cleanup(System.Byte[])">
            <summary>
             Formats the generated hash
            </summary>
            <param name="bytes">raw hash</param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.General">
            <summary>
             Here u can find some little usefull functions which makes ur life a bit easier ;)
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.General.AdjustFilePath(System.String,System.Boolean)">
            <summary>
             AdjustFilePath adds a (/) to the begin if no1 exist and remove it on the end if 1 exist, also it will replace "//" to "/"
            </summary>
            <param name="path">path to check</param>
            <param name="quote">if true it will add some quotes (") on the begin and the end of the path, also it will before it adds, try to cleanup all existing quotes (")</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.AdjustDirectoryPath(System.String,System.Boolean)">
            <summary>
             AdjustDirectoryPath adds a (/) to the given path begin and end if no1 exists, also it will replace "//" to "/"
            </summary>
            <param name="path">path to check</param>
            <param name="quote">if true it will add some quotes (") on the begin and the end of the path, also it will before it adds, try to cleanup all existing quotes (")</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.CheckDeviceState(System.String)">
            <summary>
             Returns the state of the given deviceID
            </summary>
            <param name="deviceID">string device id/serial</param>
            <returns>IDDeviceState</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ConvertUnixChmod(System.String)">
            <summary>
             Convert an unix chmod (rwsrwxrwt) to an number (5777) and reverse
            </summary>
            <param name="chmod">(rwsrwxrwt) or (5777)</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ConvertFileSize(System.Int64)">
            <summary>
             Calculate size in Byte,KB,MB,GB,TB,PT,EB,ZB,YB
            </summary>
            <param name="size">long 12389127389127389</param>
            <returns>string  2,45 MB | 200,00 GB</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ConvertFileSize(System.String)">
            <summary>
             Calculate size in Byte,KB,MB,GB,TB,PT,EB,ZB,YB
            </summary>
            <param name="size">string 12389127389127389</param>
            <returns>string  2,45 MB | 200,00 GB</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.GetEnumString(System.Enum)">
            <summary>
             Returns the real string value of the given enum
            </summary>
            <param name="enumVar">enum</param>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.GetJavaPath">
            <summary>
             Returns the Java-Path (x86/x64)
             <para>*NOTE* If Java is not installed the string will be empty</para>
             <para>*NOTE* The return is similar to "C:\Program Files (x86)\Java\jre7"</para>
            </summary>
            <returns>string</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ProcessAlive(System.String)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="processName">Process name</param>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ProcessAlive(System.Int32)">
            <summary>
             Check if the given processname is alive
            </summary>
            <param name="pid">Process ID</param>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ProcessKill(System.String)">
            <summary>
             Kills all instances of the given process
            </summary>
            <param name="processName">Process name</param>
        </member>
        <member name="M:AndroidCtrl.Tools.General.ProcessKill(System.Int32)">
            <summary>
             Kills the given process ID
            </summary>
            <param name="pid">Process ID</param>
        </member>
        <member name="M:AndroidCtrl.Tools.General.Quote(System.String)">
            <summary>
             Quote adds quotes (") to a string
            </summary>
            <param name="str"></param>
            <returns>string</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.Icons">
            <summary>
             This is the basic class to get an icon from an filepath or an file extension
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.Dispose">
            <summary>
             Dispose is not a real IDisposable but it do its work.
             <para>It deletes the created "tmp" directory which contains the icon cache and set some class vars to null</para>
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.IconOfExtension(System.String,System.Boolean)">
            <summary>
             Get the icon of an extension
            </summary>
            <param name="filename">filename</param>
            <param name="overlay">bool symlink overlay</param>
            <returns>Icon</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.IconOfFolder(System.Boolean)">
            <summary>
             Get the windows folder icon
            </summary>
            <returns>Icon</returns>
            <param name="overlay">bool symlink overlay</param>
        </member>
        <member name="M:AndroidCtrl.Tools.Icons.IconOfPath(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
             Get the normal,small assigned icon of the given path
            </summary>
            <param name="filepath">physical path</param>
            <param name="small">bool small icon</param>
            <param name="checkdisk">bool fileicon</param>
            <param name="overlay">bool symlink overlay</param>
            <returns>Icon</returns>
        </member>
        <member name="T:AndroidCtrl.Tools.TrayNotify">
            <summary>
             This is the basic class to manage the tray notifications
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.Dispose">
            <summary>
             Dispose the TrayNotify
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.SetBalloonTip(System.String)">
            <summary>
             Set the given data as BalloonTip text
            </summary>
            <param name="data">string to set</param>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.SetDeviceInfo(System.String,System.String)">
            <summary>
             Set the device information from ADB or Fastboot as balloon tip
            </summary>
            <param name="deviceid">DeviceID/-Serial</param>
            <param name="mode">adb or fastboot</param>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.SetNotify">
            <summary>
             Generate the tray notifyicon
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TrayNotify.NotifyDoubleClick(System.Object,System.EventArgs)">
            <summary>
             Restore the application window
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.TrayNotify.Active">
            <summary>
             Activate or deactivate the notify function
             <para>*NOTE* By default is this function active</para>
            </summary>
        </member>
        <member name="P:AndroidCtrl.Tools.TrayNotify.ContextMenu">
            <summary>
             Gets/Sets the Notify-Context-Menu
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDBoot">
            <summary>
             ADB/Fastboot boot modes
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.REBOOT">
            <summary>
             Implies reboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.BOOTLOADER">
            <summary>
             Implies reboot-bootloader
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDBoot.RECOVERY">
            <summary>
             Implies reboot recovery
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDDeviceState">
            <summary>
             ADB/Fastboot state ids
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.BOOTLOADER">
            <summary>
             Implies bootloader/fastboot state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.DEVICE">
            <summary>
             Implies device/adb state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.FASTBOOT">
            <summary>
             Implies fastboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.OFFLINE">
            <summary>
             Implies offline
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.RECOVERY">
            <summary>
             Implies recovery/adb state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.SIDELOAD">
            <summary>
             Implies recovery/sideload state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.UNAUTHORIZED">
            <summary>
             Implies unauthorized state
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDeviceState.UNKNOWN">
            <summary>
             Implies unknown
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDDevicePartition">
            <summary>
             Device partitions
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.BOOT">
            <summary>
             Implies boot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.CACHE">
            <summary>
             Implies cache
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.DATA">
            <summary>
             Implies data
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.HBOOT">
            <summary>
             Implies hboot
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.KERNEL">
            <summary>
             Implies kernel
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.MISC">
            <summary>
             Implies misc
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.RADIO">
            <summary>
             Implies radio
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.RAMDISK">
            <summary>
             Implies ramdisk
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.RECOVERY">
            <summary>
             Implies recovery
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.SDCARD">
            <summary>
             Implies sdcard
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.SYSTEM">
            <summary>
             Implies system
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.UNLOCKTOKEN">
            <summary>
             Implies unlocktoken
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDDevicePartition.ZIP">
            <summary>
             Implies a zip file to install
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDFileSystem">
            <summary>
             FileSystem IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.DIRECTORY">
            <summary>
             Implies an directory
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.FILE">
            <summary>
             Implies an file
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.MOUNT">
            <summary>
             Implies an mountpoint
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.NONE">
            <summary>
             Implies no/unknown file
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.ROOT">
            <summary>
             Implies the root direcory
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.SDCARD">
            <summary>
             Implies sdcard(0,ext,etc...)
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.SYMLINKFILE">
            <summary>
             Implies symlink file
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDFileSystem.SYMLINKDIRECTORY">
            <summary>
             Implies symlink directory
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDHash">
            <summary>
             Hash IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.MD5">
            <summary>
             Implies MD5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA1">
            <summary>
             Implies SHA-1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA256">
            <summary>
             Implies SHA-256
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA384">
            <summary>
             Implies SHA-384
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDHash.SHA512">
            <summary>
             Implies SHA-512
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDInstallLocation">
            <summary>
             Package-Manager install location id's
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.ERROR">
            <summary>
             Implies Error
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.AUTO">
            <summary>
             Implies Auto
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.INTERNAL">
            <summary>
             Implies Internal
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDInstallLocation.EXTERNAL">
            <summary>
             Implies External
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDKeyEvent">
            <summary>
             Device keyevent IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_0">
            <summary>
             Implies 0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_1">
            <summary>
             Implies 1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_2">
            <summary>
             Implies 2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_3">
            <summary>
             Implies 3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_3D_MODE">
            <summary>
             Implies 3D Mode key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_4">
            <summary>
             Implies 4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_5">
            <summary>
             Implies 5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_6">
            <summary>
             Implies 6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_7">
            <summary>
             Implies 7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_8">
            <summary>
             Implies 8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_9">
            <summary>
             Implies 9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_A">
            <summary>
             Implies A
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ALT_LEFT">
            <summary>
             Implies left alt
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ALT_RIGHT">
            <summary>
             Implies right alt
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_APOSTROPHE">
            <summary>
             Implies '
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_APP_SWITCH">
            <summary>
             Implies App switch key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ASSIST">
            <summary>
             Implies Assist key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_AT">
            <summary>
             Implies @
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_AVR_INPUT">
            <summary>
             Implies A/V Receiver input key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_AVR_POWER">
            <summary>
             Implies A/V Receiver power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_B">
            <summary>
             Implies B
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BACK">
            <summary>
             Implies Back
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BACKSLASH">
            <summary>
             Implies \
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BOOKMARK">
            <summary>
             Implies Bookmark key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BREAK">
            <summary>
             Implies Break / Pause key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BRIGHTNESS_DOWN">
            <summary>
             Implies Brightness Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BRIGHTNESS_UP">
            <summary>
             Implies Brightness Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_1">
            <summary>
             Implies Generic Game Pad Button #1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_10">
            <summary>
             Implies Generic Game Pad Button #10
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_11">
            <summary>
             Implies Generic Game Pad Button #11
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_12">
            <summary>
             Implies Generic Game Pad Button #12
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_13">
            <summary>
             Implies Generic Game Pad Button #13
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_14">
            <summary>
             Implies Generic Game Pad Button #14
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_15">
            <summary>
             Implies Generic Game Pad Button #15
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_16">
            <summary>
             Implies Generic Game Pad Button #16
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_2">
            <summary>
             Implies Generic Game Pad Button #2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_3">
            <summary>
             Implies Generic Game Pad Button #3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_4">
            <summary>
             Implies Generic Game Pad Button #4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_5">
            <summary>
             Implies Generic Game Pad Button #5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_6">
            <summary>
             Implies Generic Game Pad Button #6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_7">
            <summary>
             Implies Generic Game Pad Button #7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_8">
            <summary>
             Implies Generic Game Pad Button #8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_9">
            <summary>
             Implies Generic Game Pad Button #9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_A">
            <summary>
             Implies A Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_B">
            <summary>
             Implies B Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_C">
            <summary>
             Implies C Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_L1">
            <summary>
             Implies L1 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_L2">
            <summary>
             Implies L2 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_MODE">
            <summary>
             Implies Mode Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_R1">
            <summary>
             Implies R1 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_R2">
            <summary>
             Implies R2 Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_SELECT">
            <summary>
             Implies Select Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_START">
            <summary>
             Implies Start Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_THUMBL">
            <summary>
             Implies Left thumb Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_THUMBR">
            <summary>
             Implies Right thumb Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_X">
            <summary>
             Implies X Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_Y">
            <summary>
             Implies Y Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_BUTTON_Z">
            <summary>
             Implies Z Button key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_C">
            <summary>
             Implies C
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CALCULATOR">
            <summary>
             Implies Calculator special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CALENDAR">
            <summary>
             Implies Calendar special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CALL">
            <summary>
             Implies Call key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CAMERA">
            <summary>
             Implies Camera key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CAPS_LOCK">
            <summary>
             Implies Caps Lock key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CAPTIONS">
            <summary>
             Implies Toggle captions key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CHANNEL_DOWN">
            <summary>
             Implies Channel down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CHANNEL_UP">
            <summary>
             Implies Channel up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CLEAR">
            <summary>
             Implies Clear key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_COMMA">
            <summary>
             Implies ,
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CONTACTS">
            <summary>
             Implies Contacts special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CTRL_LEFT">
            <summary>
             Implies Left Control modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_CTRL_RIGHT">
            <summary>
             Implies Right Control modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_D">
            <summary>
             Implies D
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DEL">
            <summary>
             Implies Backspace key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_CENTER">
            <summary>
             Implies Directional Pad Center key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_DOWN">
            <summary>
             Implies Directional Pad Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_LEFT">
            <summary>
             Implies Directional Pad Left key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_RIGHT">
            <summary>
             Implies Directional Pad Right key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DPAD_UP">
            <summary>
             Implies Directional Pad Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_DVR">
            <summary>
             Implies DVR key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_E">
            <summary>
             Implies E
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_EISU">
            <summary>
             Implies Japanese alphanumeric key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ENDCALL">
            <summary>
             Implies End call
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ENTER">
            <summary>
             Implies Enter
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ENVELOPE">
            <summary>
             Implies Envelope special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_EQUALS">
            <summary>
             Implies =
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ESCAPE">
            <summary>
             Implies Escape key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_EXPLORER">
            <summary>
             Implies Explorer special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F">
            <summary>
             Implies F
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F1">
            <summary>
             Implies F1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F10">
            <summary>
             Implies F10
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F11">
            <summary>
             Implies F11
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F12">
            <summary>
             Implies F12
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F2">
            <summary>
             Implies F2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F3">
            <summary>
             Implies F3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F4">
            <summary>
             Implies F4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F5">
            <summary>
             Implies F5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F6">
            <summary>
             Implies F6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F7">
            <summary>
             Implies F7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F8">
            <summary>
             Implies F8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_F9">
            <summary>
             Implies F9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FOCUS">
            <summary>
             Implies Camera Focus key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FORWARD">
            <summary>
             Implies Forward key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FORWARD_DEL">
            <summary>
             Implies Forward Delete key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_FUNCTION">
            <summary>
             Implies Function modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_G">
            <summary>
             Implies G
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_GRAVE">
            <summary>
             Implies `
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_GUIDE">
            <summary>
             Implies Guide key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_H">
            <summary>
             Implies H
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_HEADSETHOOK">
            <summary>
             Implies Headset Hook key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_HENKAN">
            <summary>
             Implies Japanese conversion key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_HOME">
            <summary>
             Implies Home key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_I">
            <summary>
             Implies I
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_INFO">
            <summary>
             Implies Info key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_INSERT">
            <summary>
             Implies Insert key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_J">
            <summary>
             Implies J
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_K">
            <summary>
             Implies K
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_KANA">
            <summary>
             Implies Japanese kana key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_KATAKANA_HIRAGANA">
            <summary>
             Implies Japanese katakana / hiragana key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_L">
            <summary>
             Implies L
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_LANGUAGE_SWITCH">
            <summary>
             Implies Language Switch key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_LEFT_BRACKET">
            <summary>
             Implies [
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_M">
            <summary>
             Implies M
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MANNER_MODE">
            <summary>
             Implies Manner Mode key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_AUDIO_TRACK">
            <summary>
             Implies Audio Track key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_CLOSE">
            <summary>
             Implies Close media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_EJECT">
            <summary>
             Implies Eject media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_FAST_FORWARD">
            <summary>
             Implies Fast Forward media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_NEXT">
            <summary>
             Implies Play Next media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PAUSE">
            <summary>
             Implies Pause media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PLAY">
            <summary>
             Implies Play media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PLAY_PAUSE">
            <summary>
             Implies Play/Pause media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_PREVIOUS">
            <summary>
             Implies Play Previous media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_RECORD">
            <summary>
             Implies Record media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_REWIND">
            <summary>
             Implies Rewind media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MEDIA_STOP">
            <summary>
             Implies Stop media key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MENU">
            <summary>
             Implies Menu key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_META_LEFT">
            <summary>
             Implies Left Meta modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_META_RIGHT">
            <summary>
             Implies Right Meta modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MINUS">
            <summary>
             Implies -
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MOVE_END">
            <summary>
             Implies End Movement key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MOVE_HOME">
            <summary>
             Implies Home Movement key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MUHENKAN">
            <summary>
             Implies Japanese non-conversion key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MUSIC">
            <summary>
             Implies Music special function key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_MUTE">
            <summary>
             Implies Mute key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_N">
            <summary>
             Implies N
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NOTIFICATION">
            <summary>
             Implies Notification key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUM">
            <summary>
             Implies Number modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_0">
            <summary>
             Implies 0
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_1">
            <summary>
             Implies 1
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_2">
            <summary>
             Implies 2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_3">
            <summary>
             Implies 3
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_4">
            <summary>
             Implies 4
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_5">
            <summary>
             Implies 5
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_6">
            <summary>
             Implies 6
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_7">
            <summary>
             Implies 7
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_8">
            <summary>
             Implies 8
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_9">
            <summary>
             Implies 9
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_ADD">
            <summary>
             Implies Numeric keypad +
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_COMMA">
            <summary>
             Implies Numeric keypad ,
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_DIVIDE">
            <summary>
             Implies Numeric keypad /
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_DOT">
            <summary>
             Implies Numeric keypad .
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_ENTER">
            <summary>
             Implies Numeric keypad Enter key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_EQUALS">
            <summary>
             Implies Numeric keypad =
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_LEFT_PAREN">
            <summary>
             Implies Numeric keypad (
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_MULTIPLY">
            <summary>
             Implies Numeric keypad *
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_RIGHT_PAREN">
            <summary>
             Implies Numeric keypad )
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUMPAD_SUBTRACT">
            <summary>
             Implies Numeric keypad -
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_NUM_LOCK">
            <summary>
             Implies Num Lock key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_O">
            <summary>
             Implies O
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_P">
            <summary>
             Implies P
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PAGE_DOWN">
            <summary>
             Implies Page Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PAGE_UP">
            <summary>
             Implies Page Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PERIOD">
            <summary>
             Implies .
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PICTSYMBOLS">
            <summary>
             Implies Picture Symbols modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PLUS">
            <summary>
             Implies +
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_POUND">
            <summary>
             Implies #
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_POWER">
            <summary>
             Implies Power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_BLUE">
            <summary>
             Implies Blue "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_GREEN">
            <summary>
             Implies Green "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_RED">
            <summary>
             Implies Red "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_PROG_YELLOW">
            <summary>
             Implies Yellow "programmable" key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_Q">
            <summary>
             Implies Q
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_R">
            <summary>
             Implies R
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_RIGHT_BRACKET">
            <summary>
             Implies ]
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_RO">
            <summary>
             Implies Japanese Ro key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_S">
            <summary>
             Implies S
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SCROLL_LOCK">
            <summary>
             Implies Scroll Lock key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SEARCH">
            <summary>
             Implies Search key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SEMICOLON">
            <summary>
             Implies ;
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SETTINGS">
            <summary>
             Implies Settings key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SHIFT_LEFT">
            <summary>
             Implies Left Shift modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SHIFT_RIGHT">
            <summary>
             Implies Right Shift modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SLASH">
            <summary>
             Implies /
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SOFT_LEFT">
            <summary>
             Implies Soft Left key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SOFT_RIGHT">
            <summary>
             Implies Soft Right key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SPACE">
            <summary>
             Implies Space " "
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_STAR">
            <summary>
             Implies *
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_STB_INPUT">
            <summary>
             Implies Set-top-box input key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_STB_POWER">
            <summary>
             Implies Set-top-box power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SWITCH_CHARSET">
            <summary>
             Implies Switch Charset modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SYM">
            <summary>
             Implies Symbol modifier key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_SYSRQ">
            <summary>
             Implies System Request / Print Screen key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_T">
            <summary>
             Implies T
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TAB">
            <summary>
             Implies Tab key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TV">
            <summary>
             Implies TV key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TV_INPUT">
            <summary>
             Implies TV input key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_TV_POWER">
            <summary>
             Implies TV power key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_U">
            <summary>
             Implies U
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_UNKNOWN">
            <summary>
             Implies Unknown key code
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_V">
            <summary>
             Implies V
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_VOLUME_DOWN">
            <summary>
             Implies Volume Down key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_VOLUME_MUTE">
            <summary>
             Implies Volume Mute key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_VOLUME_UP">
            <summary>
             Implies Volume Up key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_W">
            <summary>
             Implies W
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_WINDOW">
            <summary>
             Implies Window key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_X">
            <summary>
             Implies X
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_Y">
            <summary>
             Implies Y
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_YEN">
            <summary>
             Implies Japanese Yen key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_Z">
            <summary>
             Implies Z
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ZENKAKU_HANKAKU">
            <summary>
             Implies Japanese full-width / half-width key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ZOOM_IN">
            <summary>
             Implies Zoom in key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.KEY_ZOOM_OUT">
            <summary>
             Implies Zoom out key
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDKeyEvent.MAX_KEYCODE">
            <summary>
             Implies MAX_KEYCODE *NOTE* This constant was deprecated in API level 3
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDTransfer">
            <summary>
             Transfer IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.CREATED">
            <summary>
             Implies created (file/folder)
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.ERROR">
            <summary>
             Implies error/failed
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.OK">
            <summary>
             Implies ok/successfull
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTransfer.UNKNOWN">
            <summary>
             Implies unknown
            </summary>
        </member>
        <member name="T:AndroidCtrl.IDTar">
            <summary>
             Tar compress IDs
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.BZIP2">
            <summary>
             Implies bzip2
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.GZIP">
            <summary>
             Implies gzip
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.LZMA">
            <summary>
             Implies lzma
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.TAR">
            <summary>
             Implies tar
            </summary>
        </member>
        <member name="F:AndroidCtrl.IDTar.XZ">
            <summary>
             Implies xz
            </summary>
        </member>
        <member name="T:AndroidCtrl.Tools.TypeParser">
            <summary>
             This class helps u to parse some strings in the right types
            </summary>
        </member>
        <member name="M:AndroidCtrl.Tools.TypeParser.DeviceState(System.String)">
            <summary>
             Convert a string like (bootloader,device,fastboot,etc.) in the right IDDeviceState type
            </summary>
            <param name="state">String to convert</param>
            <returns>IDDeviceState</returns>
        </member>
        <member name="M:AndroidCtrl.Tools.TypeParser.Bool(System.String)">
            <summary>
             Covert a string to bool (true,1) will be true all other will be false
            </summary>
            <param name="str">String to convert</param>
            <returns>bool</returns>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.Device">
            <summary>
             Device is the general class to interact with the device, here u find some pre-defined shell/busybox commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Directories(System.String)">
            <summary>
             Returns a new Directories instance
            </summary>
            <param name="remoteDirectory">Remote directory to interact with</param>
            <returns>Directories</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Dmesg(System.String)">
            <summary>
             Read the dmesg from the device and write it to an file on the device and/or return the data as list string.
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.DumpImage(AndroidCtrl.IDDevicePartition,System.String,System.Int32)">
            <summary>
             Image-dump of the given partition
             <para>*NOTE* This functions needs root access on the device</para>
            </summary>
            <param name="partition">IDDevicePartition</param>
            <param name="remotePath">Iemote image store path (.img)</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Files(System.String)">
            <summary>
             Returns a new Files instance
            </summary>
            <param name="remoteFile">Remote file to interact with</param>
            <returns>Files</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.FlashImage(AndroidCtrl.IDDevicePartition,System.String,System.Boolean,System.Int32)">
            <summary>
             Flash an image on the device
             <para>*NOTE* This method needs root access on the device</para>
            </summary>
            <param name="partition">DevicePartition to flash</param>
            <param name="localPath">Local filepath (.img)</param>
            <param name="tmpToSD">false to copy the img-file to the device</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Kmsg(System.String)">
            <summary>
             Write the last_kmsg or kmsg to an file on the device. Which one is written depends on the device.
            </summary>
            <param name="remoteFilePath">Logfile device path</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.SendKeyEvent(AndroidCtrl.IDKeyEvent)">
            <summary>
             Sends an single keyevent to the device
            </summary>
            <param name="key">IDKeyEvent value to send</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.SendKeyEventStack(System.Collections.Generic.List{AndroidCtrl.IDKeyEvent})">
            <summary>
             Sends a stack of keyevents to the device
             <para>*NOTE* Between the keyevents is an delay of 150 ms</para>
            </summary>
            <param name="keys">IDKeyEvents to send</param>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.Device.Uptime">
            <summary>
             Returns the Uptime
             <para>*NOTE* if busybox is not installed DataModelUptime.Load will be empty</para>
            </summary>
            <returns>DataModelUptime or null</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.ActivityManager">
            <summary>
             Returns and if not exist, creates the ActivityManager instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.BuildProperties">
            <summary>
             Returns and if not exist, creates the BuildProperties instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.BusyBox">
            <summary>
             Returns and if not exist, creates the BusyBox instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Daemon">
            <summary>
             Returns and if not exist, creates the Daemon instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Dumpsys">
            <summary>
             Returns and if not exist, creates the Dumpsys instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.FileSystem">
            <summary>
             Returns and if not exist, creates the FileSystem instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Forensics">
            <summary>
             Returns and if not exist, creates the Forensics instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Info">
            <summary>
             Returns and if not exist, creates the Info instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.LogCat">
            <summary>
             Returns and if not exist, creates the LogCat instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Mount">
            <summary>
             Returns and if not exist, creates the Mount instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.OpenRecoveryScript">
            <summary>
             Returns a new OpenRecoveryScript instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.PackageManager">
            <summary>
             Returns and if not exist, creates the PackageManager instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Phone">
            <summary>
             Returns and if not exist, creates the Phone instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Screen">
            <summary>
             Returns and if not exist, creates the Screen instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Su">
            <summary>
             Returns and if not exist, creates the Su instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.Device.Wipe">
            <summary>
             Returns and if not exist, creates the Wipe instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.ADB.Device.BusyBox.BusyBox">
            <summary>
             BusyBox is the general class to interact with the device busybox.
            </summary>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Exists">
            <summary>
             Check if the device have BusyBox installed
            </summary>
            <returns>bool</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HashFile(System.String,AndroidCtrl.IDHash)">
            <summary>
             Generate a hash value from the file path and IDHash
            </summary>
            <param name="remotePath">Remote file path</param>
            <param name="hash">IDHash default is md5</param>
            <returns>string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.HexDump(System.String)">
            <summary>
             Gets the hexdump from the given file path
            </summary>
            <param name="remotePath">Remote file path</param>
            <returns>List string or null</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.ShellCmd(System.String,System.Boolean,System.Int32)">
            <summary>
             Send an BusyBox-Shell-Command to the Device
             <para>*NOTE* timeOut = -1 implies infinite.</para>
            </summary>
            <param name="cmd">Command to send to Device Shell</param>
            <param name="su">Send command as SuperUser</param>
            <param name="timeOut">time the process will wait for output, -1 implies infinite, 0 implies class internal timeout</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Tools">
            <summary>
             Return all BusyBox included tools
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Version">
            <summary>
             Return the current BusyBox version number
            </summary>
            <returns>string</returns>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Find">
            <summary>
             Returns and if not exist, creates the Find instance
            </summary>
        </member>
        <member name="P:AndroidCtrl.ADB.Device.BusyBox.BusyBox.Tar">
            <summary>
             Returns and if not exist, creates the Tar instance
            </summary>
        </member>
        <member name="T:AndroidCtrl.Fastboot.OEM">
            <summary>
             OEM is the general class for Fastboot OEM commands.
            </summary>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Xecute(System.String)">
            <summary>
             Execute the oem commands
            </summary>
            <param name="cmd">Command to execute</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.BattCheck">
            <summary>
             BattCheck
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GetIdentifierToken">
            <summary>
             Get_identifier_token (Get the bootloader identifier_token to unlock ur bootloader, for example by HTC)
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GoToFastboot">
            <summary>
             GoToFastboot
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.GoToHBoot">
            <summary>
             GoToHBoot
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.Lock">
            <summary>
             Lock (Lock, relock the bootloader)
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerDown">
            <summary>
             PowerDown
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerOff">
            <summary>
             PowerOff
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerOn">
            <summary>
             PowerOn
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.PowerTest">
            <summary>
             PowerTest
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.RamTest">
            <summary>
             RamTest
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadCid">
            <summary>
             Readcid (Read the CID)
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadIMEI">
            <summary>
             Readimei (Read the imei)
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.ReadSecureFlag">
            <summary>
             Readsecureflag (Read the secureflag)
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.RebootRUU">
            <summary>
             RebootRUU
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.SysInfo">
            <summary>
             SysInfo
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.VibrateTest">
            <summary>
             VibrateTest
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteCid(System.String)">
            <summary>
             Writecid (Set a new (given) CID)
            </summary>
            <param name="cid">CID to set</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteIMEI(System.String)">
            <summary>
             Writeimei (Set a new imei)
            </summary>
            <param name="imei">IMEI to set</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteMid(System.String)">
            <summary>
             WriteMid (Set a new (given) MID)
            </summary>
            <param name="mid">MID to set</param>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteProtTest">
            <summary>
             WriteProtTest
            </summary>
            <returns>List string</returns>
        </member>
        <member name="M:AndroidCtrl.Fastboot.OEM.WriteSecureFlag(System.String)">
            <summary>
             Writesecureflag (Set the secureflag) 3 = S-On
            </summary>
            <param name="flag">Flag to set</param>
            <returns>List string</returns>
        </member>
    </members>
</doc>
